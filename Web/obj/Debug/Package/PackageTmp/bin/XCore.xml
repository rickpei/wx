<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XCore</name>
    </assembly>
    <members>
        <member name="T:System.Serialization.JsonString">
            <summary>
            json 序列化工具：将对象转换成 json 字符串
            </summary>
        </member>
        <member name="M:System.Serialization.JsonString.Convert(System.Object)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.Serialization.JsonString.Convert(System.Object,System.String)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.Serialization.JsonString.Convert(System.Object,System.Boolean,System.String)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <param name="isBreakline">是否换行(默认不换行，阅读起来更加清晰)</param>
            <returns></returns>
        </member>
        <member name="M:System.Serialization.JsonString.ClearNewLine(System.String)">
            <summary>
            清楚json字符串中的换行符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.Serialization.JsonString.ConvertArray(System.Object[],System.String)">
            <summary>
            将对象数组转换成 json 字符串
            </summary>
            <param name="arrObj"></param>
            <returns></returns>
        </member>
        <member name="M:System.Serialization.JsonString.ConvertList(System.Collections.IList,System.String)">
            <summary>
            将对象列表转换成 json 字符串
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:System.Serialization.JsonString.ConvertList(System.Collections.IList,System.Boolean,System.String)">
            <summary>
            将对象列表转换成 json 字符串
            </summary>
            <param name="list"></param>
            <param name="isBreakline">是否换行(默认不换行，阅读起来更加清晰)</param>
            <returns></returns>
        </member>
        <member name="M:System.Serialization.JsonString.ConvertDictionary(System.Collections.IDictionary,System.String)">
            <summary>
            将字典 Dictionary 转换成 json 字符串
            </summary>
            <param name="dic"></param>
            <returns></returns>
        </member>
        <member name="M:System.Serialization.JsonString.ConvertDictionary(System.Collections.IDictionary,System.Boolean,System.String)">
            <summary>
            将字典 Dictionary 转换成 json 字符串
            </summary>
            <param name="dic"></param>
            <param name="isBreakline">是否换行(默认不换行，阅读起来更加清晰)</param>
            <returns></returns>
        </member>
        <member name="M:System.Serialization.JsonString.ConvertObject(System.Object,System.String)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.Serialization.JsonString.ConvertObject(System.Object,System.Boolean)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <param name="isBreakline">是否换行(默认不换行，阅读起来更加清晰)</param>
            <returns></returns>
        </member>
        <member name="M:System.Serialization.JsonString.ConvertObject(System.Object,System.Boolean,System.String)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <param name="isBreakline">是否换行(默认不换行，阅读起来更加清晰)</param>
            <returns></returns>
        </member>
        <member name="M:System.Serialization.JsonString.ConvertObject(System.Object,System.Boolean,System.Boolean,System.String)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <param name="isBreakline">是否换行(默认不换行，阅读起来更加清晰)</param>
            <param name="withQuotation">属性名是否使用引号(默认不启用)</param>
            <returns></returns>
        </member>
        <member name="T:System.Serialization.JsonParser">
            <summary>
            json 反序列化工具
            </summary>
        </member>
        <member name="M:System.Serialization.JsonParser.Parse(System.String)">
            <summary>
            解析字符串，返回对象。
            根据 json 的不同，可能返回整数(int)、布尔类型(bool)、字符串(string)、一般对象(Dictionary&lt;string, object&gt;)、数组(List&lt;object&gt;)等不同类型
            </summary>
            <param name="src"></param>
            <returns>根据 json 的不同，可能返回整数(int)、布尔类型(bool)、字符串(string)、一般对象(Dictionary&lt;string, object&gt;)、数组(List&lt;object&gt;)等不同类型</returns>
        </member>
        <member name="T:System.ORM.NotSerializeAttribute">
            <summary>
            在 json 序列化的时候，打上 NotSerialize 批注的属性会被忽略
            </summary>
        </member>
        <member name="T:System.ORM.DecimalAttribute">
            <summary>
            用于自定义精度数据，也可以存储自定义精度的货币数值。
            </summary>
        </member>
        <member name="P:System.ORM.DecimalAttribute.Precision">
            <summary>
            数值的精度，即小数点左右的总共位数，但不包括小数点。
            </summary>
        </member>
        <member name="P:System.ORM.DecimalAttribute.Scale">
            <summary>
            小数点右侧的位数
            </summary>
        </member>
        <member name="T:System.ObjectBase`1">
            <summary>
            所有ORM中的领域模型都需要继承的基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:System.IEntity">
            <summary>
            可以被 ORM 持久化的对象，都自动实现了本接口
            </summary>
        </member>
        <member name="M:System.IEntity.get(System.String)">
            <summary>
            获取属性的值(并非通过反射，速度较快)
            </summary>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:System.IEntity.set(System.String,System.Object)">
            <summary>
            设置属性的值(并非通过反射，速度较快)
            </summary>
            <param name="propertyName">属性名称</param>
            <param name="propertyValue">属性的值</param>
        </member>
        <member name="P:System.IEntity.Id">
            <summary>
            每一个持久化对象，都具有一个 Id 属性
            </summary>
        </member>
        <member name="M:System.ObjectBase`1.findAll">
            <summary>
            查询所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.ObjectBase`1.findById(System.Int32)">
            <summary>
            根据 Id 查询对象
            </summary>
            <param name="oid"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectBase`1.findByField(System.String,System.String)">
            <summary>
            根据指定字段获取对象
            </summary>
            <param name="Field">字段名（varchar类型）</param>
            <param name="Value">值</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectBase`1.findByField(System.Boolean,System.Boolean,System.Collections.Hashtable)">
            <summary>
            根据指定字段列表获取对象
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectBase`1.findByField(System.Boolean,System.Boolean,System.Data.KeyValue[])">
            <summary>
            根据指定字段列表获取对象
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectBase`1.findListByField(System.String,System.String)">
            <summary>
            根据指定字段获取对象列表
            </summary>
            <param name="Field">字段名（varchar类型）</param>
            <param name="Value">值</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectBase`1.count">
            <summary>
            统计所有的数据量
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.ObjectBase`1.count(System.String)">
            <summary>
            根据条件统计数据量
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectBase`1.find(System.String)">
            <summary>
            根据查询条件，返回一个查询对象。一般用于参数化查询。
            </summary>
            <param name="condition">查询条件</param>
            <returns>返回查询对象xQuery，可以进一步参数化赋值，并得到结果</returns>
        </member>
        <member name="M:System.ObjectBase`1.findPage(System.String)">
            <summary>
            根据查询条件，返回分页数据集合
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectBase`1.findPage(System.String,System.Int32)">
            <summary>
            根据查询条件和每页数量，返回分页数据集合
            </summary>
            <param name="condition">查询条件</param>
            <param name="pageSize">每页数量</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectBase`1.findPageArchive(System.String)">
            <summary>
            存档模式翻页(默认按照 order by Id asc 排序)
            </summary>
            <param name="condition">查询条件</param>
            <returns>分页数据列表，包括当前页、总记录数、分页条等</returns>
        </member>
        <member name="M:System.ObjectBase`1.findPageArchive(System.String,System.Int32)">
            <summary>
            存档模式翻页(默认按照 order by Id asc 排序)
            </summary>
            <param name="condition">查询条件</param>
            <param name="pageSize">每页数量</param>
            <returns>分页数据列表，包括当前页、总记录数、分页条等</returns>
        </member>
        <member name="M:System.ObjectBase`1.findBySql(System.String)">
            <summary>
            直接使用 sql 语句查询，返回对象列表
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectBase`1.insert">
            <summary>
            将对象插入数据库
            </summary>
            <returns>返回一个结果对象 Result。如果发生错误，则 Result 中包含错误信息</returns>
        </member>
        <member name="M:System.ObjectBase`1.update">
            <summary>
            更新数据
            </summary>
            <returns>返回一个结果对象 Result。如果发生错误，则 Result 中包含错误信息</returns>
        </member>
        <member name="M:System.ObjectBase`1.save">
            <summary>
            保存对象，自动判断新增或更新
            </summary>
            <returns>返回一个结果对象 Result。如果发生错误，则 Result 中包含错误信息</returns>
        </member>
        <member name="M:System.ObjectBase`1.update(System.String)">
            <summary>
            只修改对象的某个特定属性
            </summary>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="M:System.ObjectBase`1.update(System.String[])">
            <summary>
            只修改对象的特定属性
            </summary>
            <param name="arrPropertyName">需要修改的属性的数组</param>
        </member>
        <member name="M:System.ObjectBase`1.delete">
            <summary>
            删除对象
            </summary>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:System.ObjectBase`1.updateBatch(System.String,System.String)">
            <summary>
            批量更新对象
            </summary>
            <param name="action">更新的操作</param>
            <param name="condition">更新的条件</param>
        </member>
        <member name="M:System.ObjectBase`1.delete(System.Int32)">
            <summary>
            根据 Id 删除对象
            </summary>
            <param name="oid"></param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:System.ObjectBase`1.deleteBatch(System.String)">
            <summary>
            批量删除对象
            </summary>
            <param name="condition">删除条件</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:System.ObjectBase`1.get(System.String)">
            <summary>
            根据属性名称获取属性的值
            </summary>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectBase`1.set(System.String,System.Object)">
            <summary>
            设置属性的值
            </summary>
            <param name="propertyName">属性名称</param>
            <param name="propertyValue">属性的值</param>
        </member>
        <member name="M:System.ObjectBase`1.getExt(System.String,System.String)">
            <summary>
            获取扩展属性内部某项的值
            </summary>
            <param name="propertyName">扩展属性名称</param>
            <param name="key">扩展属性内部某项的 key</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectBase`1.getExtDic(System.String)">
            <summary>
            获取扩展属性本身的值
            </summary>
            <param name="propertyName">扩展属性名称</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectBase`1.setExt(System.String,System.String,System.String)">
            <summary>
            给扩展属性内部某项赋值
            </summary>
            <param name="propertyName">扩展属性名称</param>
            <param name="key">扩展属性内部某项的 key</param>
            <param name="val">扩展属性内部某项的 val</param>
        </member>
        <member name="M:System.ObjectBase`1.setExtDic(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            给扩展属性本身的赋值
            </summary>
            <param name="propertyName">扩展属性名称</param>
            <param name="dic">扩展属性的值</param>
        </member>
        <member name="M:System.ObjectBase`1.CompareTo(System.Object)">
            <summary>
            排序方法(根据Id大小排序)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:System.ObjectBase`1.Id">
            <summary>
            id 对象的主键
            </summary>
        </member>
        <member name="T:System.ObjectBase`2">
            <summary>
            所有ORM中的领域模型都需要继承的基类
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="B">基类ObjectOrm</typeparam>
        </member>
        <member name="M:System.ObjectBase`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:System.ObjectBase`2.Guid">
            <summary>
            对象Guid标识字段
            </summary>
        </member>
        <member name="P:System.ObjectBase`2.CreateTimeTicks">
            <summary>
            对象创建时间（时间刻度）
            </summary>
        </member>
        <member name="P:System.ObjectBase`2.CreateTimeString">
            <summary>
            对象创建时间（常用字符串格式）
            </summary>
        </member>
        <member name="T:System.file">
            <summary>
            封装了文件常用操作方法
            </summary>
        </member>
        <member name="T:System.IO.FileEx">
            <summary>
            封装了文件常用操作方法
            </summary>
        </member>
        <member name="M:System.IO.FileEx.ReadByte(System.String)">
            <summary>
            读取文件的内容(采用UTF8编码)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <returns>文件的内容</returns>
        </member>
        <member name="M:System.IO.FileEx.WriteByte(System.String,System.Byte[])">
            <summary>
            读取文件的内容(采用UTF8编码)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <returns>文件的内容</returns>
        </member>
        <member name="M:System.IO.FileEx.WriteStream(System.String,System.IO.Stream)">
            <summary>
            读取文件的内容(采用UTF8编码)
            </summary>
            <param name="stream">文件的绝对路径</param>
            <returns>文件的内容</returns>
        </member>
        <member name="M:System.IO.FileEx.WriteByteGif(System.String,System.Byte[])">
            <summary>
            读取文件的内容(采用UTF8编码)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <returns>文件的内容</returns>
        </member>
        <member name="M:System.IO.FileEx.WriteByteJpg(System.String,System.Byte[])">
            <summary>
            读取文件的内容(采用UTF8编码)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <returns>文件的内容</returns>
        </member>
        <member name="M:System.IO.FileEx.Read(System.String)">
            <summary>
            读取文件的内容(采用UTF8编码)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <returns>文件的内容</returns>
        </member>
        <member name="M:System.IO.FileEx.Read(System.String,System.Boolean)">
            <summary>
            读取文件的内容(采用UTF8编码)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="autoCreateDir">读取文件事，如目录不存在是否自动创建目录</param>
            <returns>文件的内容</returns>
        </member>
        <member name="M:System.IO.FileEx.Read(System.String,System.Text.Encoding)">
            <summary>
            以某种编码方式，读取文件的内容
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="encoding">编码方式</param>
            <returns>文件的内容</returns>
        </member>
        <member name="M:System.IO.FileEx.Read(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            以某种编码方式，读取文件的内容
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="encoding">编码方式</param>
            <param name="autoCreateDir">是否自动创建目录</param>
            <returns>文件的内容</returns>
        </member>
        <member name="M:System.IO.FileEx.ReadAllLines(System.String)">
            <summary>
            读取文件各行内容(采用UTF8编码)，以数组形式返回
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <returns>文件各行内容</returns>
        </member>
        <member name="M:System.IO.FileEx.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            以某种编码方式，读取文件各行内容(采用UTF8编码)，以数组形式返回
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="encoding">编码方式</param>
            <returns>文件各行内容</returns>
        </member>
        <member name="M:System.IO.FileEx.Write(System.String,System.String)">
            <summary>
            将字符串写入某个文件中(采用UTF8编码)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="fileContent">需要写入文件的字符串</param>
        </member>
        <member name="M:System.IO.FileEx.Write(System.String,System.String,System.Boolean)">
            <summary>
            将字符串写入某个文件中(采用UTF8编码)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="fileContent">需要写入文件的字符串</param>
            <param name="autoCreateDir">是否自动创建目录</param>
        </member>
        <member name="M:System.IO.FileEx.Write(System.String,System.String,System.Text.Encoding)">
            <summary>
            将字符串写入某个文件中(需要指定文件编码方式)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="fileContent">需要写入文件的字符串</param>
            <param name="encoding">编码方式</param>
        </member>
        <member name="M:System.IO.FileEx.Delete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
        </member>
        <member name="M:System.IO.FileEx.Exists(System.String)">
            <summary>
            判断文件是否存在
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileEx.Move(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="sourceFileName">原来的路径</param>
            <param name="destFileName">需要挪到的新路径</param>
        </member>
        <member name="M:System.IO.FileEx.Copy(System.String,System.String)">
            <summary>
            拷贝文件(如果目标存在，不覆盖)
            </summary>
            <param name="sourceFileName">原来的路径</param>
            <param name="destFileName">需要挪到的新路径</param>
        </member>
        <member name="M:System.IO.FileEx.Copy(System.String,System.String,System.Boolean)">
            <summary>
            拷贝文件
            </summary>
            <param name="sourceFileName">原来的路径</param>
            <param name="destFileName">需要挪到的新路径</param>
            <param name="overwrite">如果目标存在，是否覆盖</param>
        </member>
        <member name="M:System.IO.FileEx.Append(System.String,System.String)">
            <summary>
            将内容追加到文件中(采用UTF8编码)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="fileContent">需要追加的内容</param>
        </member>
        <member name="M:System.IO.FileEx.Append(System.String,System.String,System.Text.Encoding)">
            <summary>
            将内容追加到文件中
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="fileContent">需要追加的内容</param>
            <param name="encoding">编码方式</param>
        </member>
        <member name="M:System.IO.FileEx.Zip(System.String)">
            <summary>
            使用ZIP格式压缩文件（未实现）
            </summary>
            <param name="sourceFileName">压缩的文件名</param>
        </member>
        <member name="M:System.IO.FileEx.Zip(System.String,System.String)">
            <summary>
            使用ZIP格式压缩文件（未实现）
            </summary>
            <param name="sourceFileName">压缩的文件名</param>
            <param name="destFileName">压缩后输出的文件名</param>
        </member>
        <member name="M:System.IO.FileEx.UnZip(System.String)">
            <summary>
            解包ZIP压缩文件（未实现）
            </summary>
            <param name="sourceFileName">需要解包的ZIP文件名</param>
        </member>
        <member name="M:System.IO.FileEx.UnZip(System.String,System.String)">
            <summary>
            解包ZIP压缩文件（未实现）
            </summary>
            <param name="sourceFileName">需要解包的ZIP文件名</param>
            <param name="destFilePath">接包后的文件输出路径</param>
        </member>
        <member name="M:System.IO.FileEx.CheckExtentName(System.String)">
            <summary>
            检查文件真实的后缀名
            </summary>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="T:System.DI.MapItem">
            <summary>
            依赖注入中的配置项
            </summary>
        </member>
        <member name="T:System.Data.CacheObject">
            <summary>
            缓存对象，常驻内存，同时以json格式存储在磁盘中
            </summary>
        </member>
        <member name="M:System.Data.CacheObject.findById(System.Int32)">
            <summary>
            根据 id 检索对象
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.CacheObject.findAll">
            <summary>
            检索出所有对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.CacheObject.findByName(System.String)">
            <summary>
            根据名称检索出对象列表
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.CacheObject.findBy(System.String,System.Object)">
            <summary>
            根据属性名，检索出对象
            </summary>
            <param name="propertyName"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.CacheObject.insert">
            <summary>
            插入数据：并对所有属性做索引，速度较慢
            </summary>
        </member>
        <member name="M:System.Data.CacheObject.insertByIndex(System.String,System.Object)">
            <summary>
            插入数据：只针对特定属性做索引，提高速度
            </summary>
            <param name="propertyName"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:System.Data.CacheObject.insertByIndex(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            插入数据：针对若干属性做索引
            </summary>
            <param name="dic"></param>
        </member>
        <member name="M:System.Data.CacheObject.update">
            <summary>
            更新数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.CacheObject.updateByIndex(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            更新数据：只针对特性数据做索引
            </summary>
            <param name="dic"></param>
        </member>
        <member name="M:System.Data.CacheObject.updateNoIndex">
            <summary>
             不持久化，也不做索引
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.CacheObject.delete">
            <summary>
            删除数据
            </summary>
        </member>
        <member name="P:System.Data.CacheObject.Id">
            <summary>
            对象的 id
            </summary>
        </member>
        <member name="P:System.Data.CacheObject.Name">
            <summary>
            对象名称
            </summary>
        </member>
        <member name="P:System.DI.MapItem.Singleton">
            <summary>
            
            </summary>
        </member>
        <member name="P:System.DI.MapItem.Map">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:System.DI.MapItem.Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Data.DbTypeChecker">
            <summary>
            检查数据库类型的工具
            </summary>
        </member>
        <member name="T:System.Caching.ApplicationCache">
            <summary>
            应用程序范围的缓存(ORM的二级缓存)
            </summary>
        </member>
        <member name="M:System.Caching.ApplicationCache.Get(System.String)">
            <summary>
            从二级缓存中获取值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:System.Caching.ApplicationCache.Put(System.String,System.Object)">
            <summary>
            将对象放入二级缓存，如果缓存中已有此项，则替换
            </summary>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:System.Caching.ApplicationCache.Put(System.String,System.Object,System.Int32)">
            <summary>
            将对象放入缓存，最后一次访问之后的 minutes 分钟内，如果还没有访问，则会过期（弹性过期）
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <param name="minutes"></param>
        </member>
        <member name="M:System.Caching.ApplicationCache.Remove(System.String)">
            <summary>
            从缓存中移除某项
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:System.Web.PostAndGet.FormatGetUrl(System.String,System.Data.KeyValue[])">
            <summary>
            根据参数列表生成请求的Url
            </summary>
            <param name="method_name">要调用的方法名</param>
            <param name="parameters">参数集合</param>
            <returns>Url</returns>
        </member>
        <member name="M:System.Web.PostAndGet.Sign(System.String,System.Data.KeyValue[])">
            <summary>
            生成包括Sig，Method，Api_key在内的全部的参数
            </summary>
            <param name="method_name"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.PostAndGet.RemoveJsonNull(System.String)">
            <summary>
            
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.PostAndGet.RemoveUnsafeHtml(System.String)">
            <summary>
            过滤HTML中的不安全标签
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.PostAndGet.Time">
            <summary>
            php time()
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Web.PostAndGet.GetParamsFromRequest(System.Web.HttpRequest)">
            <summary>
            获取API提交的参数
            </summary>
            <param name="request">request对象</param>
            <returns>参数数组</returns>
        </member>
        <member name="M:System.Web.PostAndGet.GetSignature(System.Data.KeyValue[],System.String)">
            <summary>
            根据参数和密码生成签名字符串
            </summary>
            <param name="parameters">API参数</param>
            <param name="secret">密码</param>
            <returns>签名字符串</returns>
        </member>
        <member name="M:System.Web.PostAndGet.GetQueryString">
            <summary>
            获取API数据同步传递的参数
            </summary>
            <returns></returns>
        </member>
        <member name="P:System.Web.PostAndGet.Secret">
            <summary>
            应用程序的Secret密钥
            </summary>
        </member>
        <member name="P:System.Web.PostAndGet.ApiKey">
            <summary>
            应用程序的ApiKey标识
            </summary>
        </member>
        <member name="P:System.Web.PostAndGet.Url">
            <summary>
            CloudDesk服务器地址
            </summary>
        </member>
        <member name="T:System.Web.Html">
            <summary>
            提供常用的 html 控件，比如单选列表、多选列表、下拉列表等
            </summary>
        </member>
        <member name="M:System.Web.Html.CheckBoxList(System.String[],System.String,System.Object)">
            <summary>
            多选框(用数组填充)
            </summary>
            <param name="items">填充列表的字符数组</param>
            <param name="chkName">控件名称</param>
            <param name="sValue">选定的值，多个选值之间用英文逗号分开，比如 "2, 6, 13"</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Html.CheckBoxList(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Object)">
            <summary>
            多选框(用 Dictionary 填充)
            </summary>
            <param name="dic">填充列表的 Dictionary</param>
            <param name="chkName">控件名称</param>
            <param name="sValue">选定的值，多个选值之间用英文逗号分开，比如 "2, 6, 13"</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Html.CheckBoxList(System.Collections.IList,System.String,System.String,System.String,System.Object)">
            <summary>
            多选框(用对象列表填充)
            </summary>
            <param name="list">填充多选列表的对象列表</param>
            <param name="chkName">控件名称</param>
            <param name="textField">对象的属性名称(用于选框中文本部分)</param>
            <param name="valueField">对象的属性名称(用于选框中值)</param>
            <param name="sValue">选定的值，多个选值之间用英文逗号分开，比如 "2, 6, 13"</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Html.DropList(System.String[],System.String,System.Object)">
            <summary>
            下拉控件(用数组填充)
            </summary>
            <param name="items">填充下拉框的字符数组</param>
            <param name="dropName">控件名称</param>
            <param name="val">选定的值</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Html.DropList(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Object)">
            <summary>
            下拉控件(用 Dictionary 填充)
            </summary>
            <param name="dic">填充下拉框的Dictionary</param>
            <param name="dropName">控件名称</param>
            <param name="val">选定的值</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Html.DropList(System.Collections.IList,System.String,System.String,System.String,System.Object)">
            <summary>
            下拉控件(用对象列表填充)
            </summary>
            <param name="list">填充下拉框的对象列表</param>
            <param name="dropName">控件名称</param>
            <param name="textField">对象的属性名称(用于选框中文本部分)</param>
            <param name="valueField">对象的属性名称(用于选框中值)</param>
            <param name="val">选定的值</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Html.RadioList(System.String[],System.String,System.Object)">
            <summary>
            多个单选的列表(用字符数组填充)
            </summary>
            <param name="items">填充列表的字符数组</param>
            <param name="radioName">控件名称</param>
            <param name="val">选定的值</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Html.RadioList(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Object)">
            <summary>
            多个单选的列表(用 Dictionary 填充)
            </summary>
            <param name="dic">填充列表的 Dictionary</param>
            <param name="radioName">控件名称</param>
            <param name="val">选定的值</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Html.RadioList(System.Collections.IList,System.String,System.String,System.String,System.Object)">
            <summary>
            多个单选的列表(用对象列表填充)
            </summary>
            <param name="list">填充单选列表的对象列表</param>
            <param name="radioName">控件名称</param>
            <param name="textField">对象的属性名称(用于选框中文本部分)</param>
            <param name="valueField">对象的属性名称(用于选框中值)</param>
            <param name="val">选定的值</param>
            <returns></returns>
        </member>
        <member name="T:System.PageList">
            <summary>
            分页后的结果集
            </summary>
        </member>
        <member name="T:System.IPageList">
            <summary>
            分页后的结果集
            </summary>
        </member>
        <member name="P:System.IPageList.Results">
            <summary>
            当前页的数据列表
            </summary>
        </member>
        <member name="P:System.IPageList.RecordCount">
            <summary>
            所有记录数
            </summary>
        </member>
        <member name="P:System.IPageList.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:System.IPageList.Size">
            <summary>
            每页数
            </summary>
        </member>
        <member name="P:System.IPageList.Current">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:System.IPageList.PageBar">
            <summary>
            已经封装好的html分页栏
            </summary>
        </member>
        <member name="M:System.PageList.GetEmpty">
            <summary>
            返回一个空的分页结果集
            </summary>
            <returns></returns>
        </member>
        <member name="P:System.PageList.Current">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:System.PageList.Size">
            <summary>
            每页数量
            </summary>
        </member>
        <member name="P:System.PageList.PageBar">
            <summary>
            已经封装好的html分页栏
            </summary>
        </member>
        <member name="P:System.PageList.PageCount">
            <summary>
            总共页数
            </summary>
        </member>
        <member name="P:System.PageList.RecordCount">
            <summary>
            所有记录数
            </summary>
        </member>
        <member name="P:System.PageList.Results">
            <summary>
            当前页的数据列表
            </summary>
        </member>
        <member name="T:System.ORM.ColumnAttribute">
            <summary>
            数据列批注，用于标识属性在数据库中对应的列名称和长度
            </summary>
        </member>
        <member name="T:System.Data.OracleFactory">
            <summary>
            oracle 数据工厂，获取 Connection, Command, DataAdapter
            </summary>
            <summary>
            oracle 数据工厂，获取 Connection, Command, DataAdapter
            </summary>
        </member>
        <member name="T:System.Data.DbFactoryBase">
            <summary>
            数据工厂抽象基类，可以不用考虑数据库差异而获取 Connection, Command, DataAdapter
            </summary>
        </member>
        <member name="T:System.ORM.DatabaseAttribute">
            <summary>
            数据库批注
            </summary>
        </member>
        <member name="T:System.Log.ILogMsg">
            <summary>
            日志信息接口
            </summary>
        </member>
        <member name="P:System.Log.ILogMsg.LogLevel">
            <summary>
            日志的等级
            </summary>
        </member>
        <member name="P:System.Log.ILogMsg.LogTime">
            <summary>
            日志的时间
            </summary>
        </member>
        <member name="P:System.Log.ILogMsg.Message">
            <summary>
            日志的内容
            </summary>
        </member>
        <member name="P:System.Log.ILogMsg.TypeName">
            <summary>
            输出日志的类型名称
            </summary>
        </member>
        <member name="T:System.IO.Base64Encoder">
            <summary>
            Base64编码类。
            将byte[]类型转换成Base64编码的string类型。
            </summary>
        </member>
        <member name="T:System.IO.Base64Decoder">
            <summary>
            Base64解码类
            将Base64编码的string类型转换成byte[]类型
            </summary>
        </member>
        <member name="T:System.Data.DataFactory">
            <summary>
            数据工厂，可以不用考虑数据库差异而获取 Connection, Command, DataAdapter
            </summary>
        </member>
        <member name="T:System.Web.Jobs.WebJob">
            <summary>
            计划任务对象
            </summary>
        </member>
        <member name="P:System.Web.Jobs.WebJob.Type">
            <summary>
            类的完整名称，比如System.XCenter.Common.Jobs.RefreshServerJob
            </summary>
        </member>
        <member name="P:System.Web.Jobs.WebJob.Interval">
            <summary>
            间隔时间。单位:ms
            </summary>
        </member>
        <member name="P:System.Web.Jobs.WebJob.IsRunning">
            <summary>
            是否运行
            </summary>
        </member>
        <member name="T:System.Reflection.IPropertyAccessor">
            <summary>
            属性操作工具
            </summary>
        </member>
        <member name="T:System.ORM.LongTextAttribute">
            <summary>
            长文本批注，标识此属性对应的数据列允许接受长文本字符串
            </summary>
        </member>
        <member name="T:System.lang">
            <summary>
            语言包工具，用于加载多国语言。
            </summary>
            <remarks>
            默认语言包文件存放在 /xcenter/lang/ 中，比如 /xcenter/lang/zh-cn/ 。只要在 /xcenter/lang/  中新增一个语言包文件夹，则系统将其作为语言包列表自动加载。可添加的语言包名称包括：en-us,en-gb,zh-cn,zh-tw,ja,ko,fr,de,it
            </remarks>
        </member>
        <member name="M:System.lang.getLangString">
            <summary>
            获取当前语言字符(比如 zh-cn，或 en-us)
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.lang.get(System.String)">
            <summary>
            获取某 key 的语言值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:System.lang.getKey(System.String)">
            <summary>
            获取某 key 的语言值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:System.lang.getCoreLang">
            <summary>
            获取在 core.config 中定义的核心语言包
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.lang.getByApp(System.Type)">
            <summary>
            根据类型 t 获取语言列表
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:System.lang.GetSupportedLang">
            <summary>
            获取所有支持的语言包
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Data.DbContext">
            <summary>
            数据库上下文，主要用于获取数据库连接
            </summary>
        </member>
        <member name="M:System.Data.DbContext.closeConnectionAll">
            <summary>
            关闭数据库连接。因为ORM支持多个数据库，所以所有可能的数据库连接都会一起关闭。
            </summary>
        </member>
        <member name="M:System.Data.DbContext.getConnectionAll">
            <summary>
            获取所有的数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.DbContext.beginTransactionAll">
            <summary>
            针对所有数据库连接，开启数据库事务
            </summary>
        </member>
        <member name="M:System.Data.DbContext.getConnection(System.Type)">
            <summary>
            获取数据库连接，返回的连接已经打开(open)；在 mvc 框架中不用关闭，框架会自动关闭连接。
            之所以要传入 Type，因为 ORM 支持多个数据库，不同的类型有可能映射到不同的数据库。
            </summary>
            <param name="t">实体的类型</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.DbContext.getConnection(System.ORM.EntityInfo)">
            <summary>
            获取数据库连接，返回的连接已经打开(open)；在 mvc 框架中不用关闭，框架会自动关闭连接。
            之所以要传入 EntityInfo，因为 ORM 支持多个数据库，不同的类型有可能映射到不同的数据库。
            </summary>
            <param name="et"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.DbContext.commitAll">
            <summary>
            提交全部的数据库事务
            </summary>
        </member>
        <member name="M:System.Data.DbContext.rollbackAll">
            <summary>
            回滚所有数据库事务
            </summary>
        </member>
        <member name="M:System.Data.DbContext.getSqlCount">
            <summary>
            获取存储在上下文中的 sql 执行次数
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Web.Jobs.WebJobStarter">
            <summary>
            计划任务启动器
            </summary>
        </member>
        <member name="T:System.TemplateEngine.LabelParameter">
            <summary>
            标签参数
            </summary>
        </member>
        <member name="F:System.TemplateEngine.LabelParameter.LPName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="F:System.TemplateEngine.LabelParameter.LPValue">
            <summary>
            参数值
            </summary>
        </member>
        <member name="F:System.TemplateEngine.Action.LblParams">
            <summary>
            标签所有参数
            </summary>
        </member>
        <member name="F:System.TemplateEngine.Action.LabelName">
            <summary>
            标签名称
            </summary>
        </member>
        <member name="F:System.TemplateEngine.Action._FinalHtmlCode">
            <summary>
            最终的HTML代码
            </summary>
        </member>
        <member name="F:System.TemplateEngine.Action.Primary">
            <summary>
            标签的主体部份
            </summary>
        </member>
        <member name="F:System.TemplateEngine.Action.Inserted">
            <summary>
            标签中间插入代码部份或模版文件内容
            </summary>
        </member>
        <member name="F:System.TemplateEngine.Action.InsertedPic">
            <summary>
            标签中间插入图片集代码的部份
            </summary>
        </member>
        <member name="F:System.TemplateEngine.Action.Loop">
            <summary>
            循环次数
            </summary>
        </member>
        <member name="F:System.TemplateEngine.Action._VerifyInfo">
            <summary>
            标签的验证信息
            </summary>
        </member>
        <member name="M:System.TemplateEngine.Action.ParseContent">
            <summary>
            解析标签内容
            </summary>
        </member>
        <member name="M:System.TemplateEngine.Action.AnalyzeLabel">
            <summary>
            解析标签参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.TemplateEngine.Action.AddParameter(System.TemplateEngine.LabelParameter,System.Collections.Generic.IList{System.TemplateEngine.LabelParameter}@)">
            <summary>
            将一个参数加入参数队列
            </summary>
            <param name="lp">标签参数</param>
            <param name="list">列表</param>
        </member>
        <member name="M:System.TemplateEngine.Action.GetParam(System.String)">
            <summary>
            查找某一参数的值
            </summary>
            <param name="key">参数的名称</param>
            <returns></returns>
        </member>
        <member name="M:System.TemplateEngine.Action.GetIntParam(System.String)">
            <summary>
            获得整形参数
            </summary>
            <param name="key">参数名称</param>
            <returns>参数值</returns>
        </member>
        <member name="P:System.TemplateEngine.Action.Params">
            <summary>
            传递的参数集合
            </summary>
        </member>
        <member name="P:System.TemplateEngine.Action.ThisContext">
            <summary>
            当前请求
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:System.TemplateEngine.Action.TagContent">
            <summary>
            标签内容
            </summary>
        </member>
        <member name="P:System.TemplateEngine.Action.SkinRoot">
            <summary>
            模版路径
            </summary>
        </member>
        <member name="P:System.TemplateEngine.Action.LabelType">
            <summary>
            标签种类
            </summary>
        </member>
        <member name="P:System.TemplateEngine.Action.CurrentClassID">
            <summary>
            当前的栏目ID
            </summary>
        </member>
        <member name="P:System.TemplateEngine.Action.CurrentNewsID">
            <summary>
            当前新闻ID
            </summary>
        </member>
        <member name="P:System.TemplateEngine.Action.CurrentPath">
            <summary>
            当前访问路径
            </summary>
        </member>
        <member name="M:System.TemplateEngine.ActionBase.GetArticle">
            <summary>
            获取文章信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.TemplateEngine.ActionBase.GetNewsClass">
            <summary>
            获取栏目信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.TemplateEngine.ClassBase">
            <summary>
            文章栏目基础数据
            </summary>
        </member>
        <member name="T:System.TemplateEngine.ArticleBase">
            <summary>
            文章信息基础数据
            </summary>
        </member>
        <member name="T:System.PathHelper">
            <summary>
            封装了 web 场合下常用路径和 url 的操作
            </summary>
        </member>
        <member name="M:System.PathHelper.Map(System.String)">
            <summary>
            将相对路径转换为绝对路径
            </summary>
            <param name="path">必须是相对路径</param>
            <returns>返回绝对路径</returns>
        </member>
        <member name="M:System.PathHelper.CombineAbs(System.String[])">
            <summary>
            将几个路径拼接为绝对路径(第一个路径必须是绝对路径)
            </summary>
            <param name="arrPath"></param>
            <returns></returns>
        </member>
        <member name="M:System.PathHelper.GetPathList(System.String,System.String)">
            <summary>
            从指定的path中去除掉rootPath部分，
            </summary>
            <param name="rootPath">需要剔除的根路径</param>
            <param name="pathFull">被处理的path</param>
            <returns>返回多个路径列表(从子命名空间依次到跟命名空间)</returns>
        </member>
        <member name="M:System.PathHelper.IsFullUrl(System.String)">
            <summary>
            检查url是否完整(是否以http开头或者以域名开头)
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:System.PathHelper.hasCommonExt(System.String)">
            <summary>
            判断网址是否包含常见后缀名，比如 .htm/.html/.aspx/.jpg/.doc/.avi 等
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.PathHelper.UrlHasExt(System.String)">
            <summary>
            判断网址是否包含后缀名，比如 xyzz/ab.htm 包含，my/xyz/dfae3 则不包含
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:System.PathHelper.IsOutUrl(System.String)">
            <summary>
            是否是外部链接
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:System.PathHelper.TrimUrlExt(System.String)">
            <summary>
            剔除掉 url 的后缀名
            </summary>
            <param name="rawUrl">原始url</param>
            <returns>返回被剔除掉后缀名的 url</returns>
        </member>
        <member name="M:System.PathHelper.CompareUrlWithoutExt(System.String,System.String)">
            <summary>
            在不考虑后缀名的情况下，比较两个网址是否相同
            </summary>
            <param name="url1"></param>
            <param name="url2"></param>
            <returns></returns>
        </member>
        <member name="T:System.ORM.ObjectPage">
            <summary>
            分页查询的结果集的处理，确定当前页、生成分页栏 html 等 
            </summary>
            <example>
            只要提供三个参数，就可以获取分页bar<br/>
            1）recordCount (记录总数)  <br/>
            2）pageSize (每页数量)  <br/>
            3）currentPage (当前页码)  <br/>
            然后通过构造函数给 ObjectPage 赋值，然后通过它的 PageBar 属性就可以得到分页栏了。
            int recordCount = 302; 
            int pageSize = 15;
            int currentPage = ctx.route.page;
            System.ORM.ObjectPage op = new System.ORM.ObjectPage( recordCount, pageSize, currentPage );
            set( "page", op.PageBar );
            </example>
        </member>
        <member name="M:System.ORM.ObjectPage.GetPageBarByLink(System.String,System.Int32,System.Int32)">
            <summary>
            在已有的翻页链接后，增加额外的分页码。采用query形式："?cp=***"
            </summary>
            <param name="lnk">已有链接</param>
            <param name="pageCount">总页数</param>
            <param name="currentPage">当前页</param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.ObjectPage.GetSimplePageBar">
            <summary>
            获取简易形式的分页栏
            </summary>
            <returns></returns>
        </member>
        <member name="P:System.ORM.ObjectPage.PageBar">
            <summary>
            数据列表的分页栏(包括html)，你也可以根据 PageCount/RecordCount/getCurrent()/getSize() 自定义。
            </summary>
        </member>
        <member name="T:System.ORM.DefaultAttribute">
            <summary>
            默认值批注，当属性没有被赋值的时候，系统使用此默认值存入数据库
            </summary>
        </member>
        <member name="T:System.DI.ObjectContext">
            <summary>
            IOC 管理容器
            </summary>
        </member>
        <member name="M:System.DI.ObjectContext.GetByName(System.String)">
            <summary>
            根据依赖注入的配置文件中的 name 获取对象
            </summary>
            <param name="objectName"></param>
            <returns></returns>
        </member>
        <member name="M:System.DI.ObjectContext.GetByType(System.String)">
            <summary>
            从缓存中取对象(有注入的就注入，没有注入的直接生成)，结果是单例
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:System.DI.ObjectContext.GetByType(System.Type)">
            <summary>
            从缓存中取对象(有注入的就注入，没有注入的直接生成)，结果是单例
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:System.DI.ObjectContext.CreateObject(System.Type)">
            <summary>
            根据type，不从缓存(pool)中取，而是全新创建实例(有注入的就注入，没有注入的直接生成)，肯定不是单例
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:System.DI.ObjectContext.CreateObject(System.String)">
            <summary>
            根据type，不从缓存(pool)中取，而是全新创建实例(有注入的就注入，没有注入的直接生成)，肯定不是单例
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:System.DI.ObjectContext.Create``1">
            <summary>
            根据type，不从缓存(pool)中取，而是全新创建实例(有注入的就注入，没有注入的直接生成)，肯定不是单例
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.DI.ObjectContext.LoadAssembly(System.String)">
            <summary>
            加载程序集并返回此程序集，如果容器中已存在，则直接从容器中获取
            </summary>
            <param name="asmName"></param>
            <returns></returns>
        </member>
        <member name="M:System.DI.ObjectContext.FindTypes(System.String)">
            <summary>
            加载某程序集里的所有类型，如果容器中已存在，则直接从容器中获取
            </summary>
            <param name="asmName"></param>
            <returns></returns>
        </member>
        <member name="M:System.DI.ObjectContext.Inject(System.Object)">
            <summary>
            根据容器配置，将依赖关系注入到已创建的对象中
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:System.DI.ObjectContext.Instance">
            <summary>
            容器的实例(单例)
            </summary>
        </member>
        <member name="P:System.DI.ObjectContext.AssemblyList">
            <summary>
            所有纳入容器管理的程序集
            </summary>
        </member>
        <member name="P:System.DI.ObjectContext.AssemblyTypes">
            <summary>
            所有程序集的 Dictionary
            </summary>
        </member>
        <member name="P:System.DI.ObjectContext.ResolvedMap">
            <summary>
            已经解析过的类型
            </summary>
        </member>
        <member name="P:System.DI.ObjectContext.TypeList">
            <summary>
            所有纳入容器管理的类型
            </summary>
        </member>
        <member name="P:System.DI.ObjectContext.ObjectsByName">
            <summary>
            根据名称罗列的对象表
            </summary>
        </member>
        <member name="P:System.DI.ObjectContext.ObjectsByType">
            <summary>
            根据类型罗列的对象表
            </summary>
        </member>
        <member name="P:System.DI.ObjectContext.DtoList">
            <summary>
            获取所有的dto(工厂)，用于创建dto对象
            </summary>
        </member>
        <member name="T:System.Data.SQLServerDialect">
            <summary>
            sqlserver 特殊语法处理器
            </summary>
        </member>
        <member name="T:System.Data.IDatabaseDialect">
            <summary>
            各种数据库的特殊语法处理接口
            </summary>
        </member>
        <member name="T:System.cvt">
            <summary>
            不同类型之间数值转换
            </summary>
        </member>
        <member name="M:System.cvt.IsDecimal(System.String)">
            <summary>
            判断字符串是否是小数或整数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.cvt.IsIdListValid(System.String)">
            <summary>
            判断字符串是否是多个整数的列表，整数之间必须通过英文逗号分隔
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:System.cvt.IsInt(System.String)">
            <summary>
            判断字符串是否是整数或负整数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.cvt.IsBool(System.String)">
            <summary>
            判断字符串是否是"true"或"false"(不区分大小写)
            </summary>
            <param name="str"></param>
            <returns>只有字符串是"true"或"false"(不区分大小写)时，才返回true</returns>
        </member>
        <member name="M:System.cvt.To(System.Object,System.Type)">
            <summary>
            将对象转换成目标类型
            </summary>
            <param name="val"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:System.cvt.ToBool(System.Int32)">
            <summary>
            将整数转换成 Boolean 类型。只有参数等于1时，才返回true
            </summary>
            <param name="integer"></param>
            <returns>只有参数等于1时，才返回true</returns>
        </member>
        <member name="M:System.cvt.ToBool(System.Object)">
            <summary>
            将对象转换成 Boolean 类型。只有对象的字符串形式等于1或者true(不区分大小写)时，才返回true
            </summary>
            <param name="objBool"></param>
            <returns>只有对象的字符串形式等于1或者true(不区分大小写)时，才返回true</returns>
        </member>
        <member name="M:System.cvt.ToBool(System.String)">
            <summary>
            将字符串(不区分大小写)转换成 Boolean 类型。只有字符串等于1或者true时，才返回true
            </summary>
            <param name="str"></param>
            <returns>只有字符串等于1或者true时，才返回true</returns>
        </member>
        <member name="M:System.cvt.ToDecimal(System.String)">
            <summary>
            将字符串转换成 System.Decimal 类型。如果str不是整数或小数，返回0
            </summary>
            <param name="str"></param>
            <returns>如果str不是整数或小数，返回0</returns>
        </member>
        <member name="M:System.cvt.ToDouble(System.String)">
            <summary>
            将字符串转换成 System.Double 类型。如果str不是整数或小数，返回0
            </summary>
            <param name="str"></param>
            <returns>如果str不是整数或小数，返回0</returns>
        </member>
        <member name="M:System.cvt.ToDecimal(System.String,System.Decimal)">
            <summary>
            将字符串转换成 System.Decimal 类型。如果str不是整数或小数，返回参数 defaultValue 指定的值
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.cvt.ToInt(System.Object)">
            <summary>
            将对象转换成整数；如果不是整数，则返回0
            </summary>
            <param name="objInt"></param>
            <returns>如果不是整数，则返回0</returns>
        </member>
        <member name="M:System.cvt.ToInt(System.Decimal)">
            <summary>
            将 decimal 转换成整数
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:System.cvt.ToNotNull(System.Object)">
            <summary>
            将对象转换成非Null形式，如果传入的参数是 null，则返回空字符串(即""，也即string.Empty)
            </summary>
            <param name="str"></param>
            <returns>如果为null，则返回空字符串(即""，也即string.Empty)</returns>
        </member>
        <member name="M:System.cvt.ToTime(System.Object)">
            <summary>
            将对象转换成 DateTime 形式，如果不符合格式，则返回当前时间
            </summary>
            <param name="objTime"></param>
            <returns>如果不符合格式，则返回当前时间</returns>
        </member>
        <member name="M:System.cvt.ToTime(System.Object,System.DateTime)">
            <summary>
            将对象转换成 DateTime 形式，如果不符合格式，则返回第二个参数指定的时间
            </summary>
            <param name="objTime"></param>
            <param name="targetTime"></param>
            <returns></returns>
        </member>
        <member name="M:System.cvt.IsDayEqual(System.DateTime,System.DateTime)">
            <summary>
            判断两个时间的日期是否相同(要求同年同月同日)
            </summary>
            <param name="day1"></param>
            <param name="day2"></param>
            <returns></returns>
        </member>
        <member name="M:System.cvt.ToDayString(System.DateTime)">
            <summary>
            获取日期的日常表达形式，要求最近三天依次用 {今天，昨天，前天} 表示
            </summary>
            <param name="day"></param>
            <returns>要求最近三天依次用 {今天、昨天、前天} 表示</returns>
        </member>
        <member name="M:System.cvt.ToTimeString(System.DateTime)">
            <summary>
            获取时间的日常表达形式，格式为 {**小时前，**分钟前，**秒前}，以及 {昨天，前天}
            </summary>
            <param name="t"></param>
            <returns>格式为 {**小时前，**分钟前，**秒前}，以及 {昨天，前天}</returns>
        </member>
        <member name="M:System.cvt.ToDateEnString(System.DateTime)">
            <summary>
            获取时间的英文表达形式，格式如 {Monday, November 12, 2012}
            </summary>
            <param name="t"></param>
            <returns>格式如 {Monday, November 12, 2012}</returns>
        </member>
        <member name="M:System.cvt.ToDateEnShortString(System.DateTime)">
            <summary>
            获取时间的英文表达形式，格式如 {Apr 07,2012}
            </summary>
            <param name="t"></param>
            <returns>格式如 {Apr 07,2012}</returns>
        </member>
        <member name="M:System.cvt.ToDateEnLongString(System.DateTime)">
            <summary>
            获取时间的英文表达形式，格式如 {Mon, 12 Nov 2012 00:00:00 GMT}
            </summary>
            <param name="t"></param>
            <returns>格式如 {Mon, 12 Nov 2012 00:00:00 GMT}</returns>
        </member>
        <member name="M:System.cvt.ToString(System.Int32[])">
            <summary>
            将整数转换成字符串形式，多个整数之间用英文逗号分隔
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:System.cvt.ToIntArray(System.String)">
            <summary>
            将字符串形式的 id 列表转换成整型数组
            </summary>
            <param name="myids"></param>
            <returns></returns>
        </member>
        <member name="M:System.cvt.ToColorValue(System.String)">
            <summary>
            将字符串转换成以井号开头的表达形式；如果不是有效的颜色值，则返回null
            </summary>
            <param name="val"></param>
            <returns>将字符串转换成以井号开头的表达形式；如果不是有效的颜色值，则返回null</returns>
        </member>
        <member name="M:System.cvt.ToBase62(System.Int64)">
            <summary>
            将10进制整数转换为62进制
            </summary>
            <param name="inputNum"></param>
            <returns>62进制数</returns>
        </member>
        <member name="M:System.cvt.ToBase(System.Int64,System.String)">
            <summary>
            将10进制整数转换为n进制
            </summary>
            <param name="inputNum">10进制整数</param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:System.cvt.DeBase62(System.String)">
            <summary>
            将62进制转换为10进制整数
            </summary>
            <param name="str">62进制数</param>
            <returns>10进制整数</returns>
        </member>
        <member name="M:System.cvt.DeBase(System.String,System.String)">
            <summary>
            将n进制转换为10进制整数
            </summary>
            <param name="str">需要转换的n进制数</param>
            <param name="chars"></param>
            <returns>10进制整数</returns>
        </member>
        <member name="M:System.cvt.ToXML(System.Object)">
            <summary>
            将对象序列化为 xml (内部调用 .net 框架自带的 XmlSerializer)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:System.cdb">
            <summary>
            从内存数据库中查询数据
            </summary>
            <remarks>
            数据持久化在 /framework/data/ 目录下，以json格式存储。加载之后常驻内存。
            特点：直接从内存中检索，速度相当于 Hashtable。插入和更新较慢(相对而言)，因为插入和更新会在内存中重建索引。
            </remarks>
        </member>
        <member name="M:System.cdb.findById``1(System.Int32)">
            <summary>
            根据 id 查询某条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns>返回某条数据</returns>
        </member>
        <member name="M:System.cdb.insert(System.Data.CacheObject)">
            <summary>
            插入数据，并对所有属性做索引，速度较慢。新插入的数据会被同步持久化到磁盘。
            </summary>
        </member>
        <member name="M:System.cdb.insertByIndex(System.Data.CacheObject,System.String,System.Object)">
            <summary>
            插入时，只针对特定属性做索引，提高速度
            </summary>
            <param name="propertyName">需要做索引的属性</param>
            <param name="pValue">属性的值</param>
        </member>
        <member name="M:System.cdb.update(System.Data.CacheObject)">
            <summary>
            更新对象，并将对象同步持久化的磁盘，同时更新索引
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.cdb.updateNoIndex(System.Data.CacheObject)">
            <summary>
             更新数据（不持久化，也不做索引）
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.cdb.delete(System.Data.CacheObject)">
            <summary>
            从内存中删除数据，并同步磁盘中内容。
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:System.cdb.findAll``1">
            <summary>
            查询类型 T 的所有数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns>返回所有数据的列表</returns>
        </member>
        <member name="M:System.cdb.findBy``1(System.String,System.Object)">
            <summary>
            根据属性查询数据。框架已经给对象的所有属性做了索引。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">属性名称</param>
            <param name="val">属性的值</param>
            <returns>返回数据列表</returns>
        </member>
        <member name="M:System.cdb.findByName``1(System.String)">
            <summary>
            根据名称查询数据，因为已经根据名称做了索引，所以速度很快。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns>返回数据列表</returns>
        </member>
        <member name="M:System.cdb.findPage``1(System.String,System.Object,System.Int32)">
            <summary>
            查询分页后的数据列表。不用提供当前页信息，因为在web环境中，框架会自动获取当前页面。
            分页是在内存中进行的，也就是先查询内存中所有记录，然后根据当前页和 pageSize 获取特定页面的数据。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">属性名称</param>
            <param name="val">属性的值</param>
            <param name="pageSize">每页需要显示的数据量</param>
            <returns>分页数据列表，包括当前页、总记录数、分页条等</returns>
        </member>
        <member name="M:System.cdb.findPage``1(System.Int32)">
            <summary>
            查询分页后的数据列表。不用提供当前页信息，因为在web环境中，框架会自动获取当前页面。
            分页是在内存中进行的，也就是先查询内存中所有记录，然后根据当前页和 pageSize 获取特定页面的数据。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pageSize">每页需要显示的数据量</param>
            <returns>分页数据列表，包括当前页、总记录数、分页条等</returns>
        </member>
        <member name="T:System.TemplateEngine.PageBase">
            <summary>
            页面基类
            </summary>
        </member>
        <member name="F:System.TemplateEngine.PageBase._currentroot">
            <summary>
            当前路径
            </summary>
        </member>
        <member name="F:System.TemplateEngine.PageBase._filename">
            <summary>
            模板文件名称
            </summary>
        </member>
        <member name="F:System.TemplateEngine.PageBase._skinname">
            <summary>
            风格名称
            </summary>
        </member>
        <member name="F:System.TemplateEngine.PageBase._skinroot">
            <summary>
            风格名称
            </summary>
        </member>
        <member name="F:System.TemplateEngine.PageBase._context">
            <summary>
            当前请求
            </summary>
        </member>
        <member name="M:System.TemplateEngine.PageBase.ReadTemplate">
            <summary>
            获得参数对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:System.TemplateEngine.PageBase.GetTemplate(System.String,System.String)">
            <summary>
            获取模板内容
            </summary>
            <param name="skinName">模板名</param>
            <param name="fileName">模板文件的文件名称</param>
            <returns></returns>
        </member>
        <member name="M:System.TemplateEngine.PageBase.GetTemplate(System.String)">
            <summary>
            获取模板内容
            </summary>
            <param name="fileName">模板文件的文件名称</param>
            <returns></returns>
        </member>
        <member name="M:System.TemplateEngine.PageBase.IncludeTemplate(System.String,System.String)">
            <summary>
            转唤标签
            </summary>
            <param name="skinName">模板目录</param>
            <param name="inputStr">模板内容</param>
            <param name="Inherits">引用的类名称</param>
            <returns></returns>
        </member>
        <member name="M:System.TemplateEngine.PageBase.ConvertUIConfig(System.String,System.Data.KeyValue[])">
            <summary>
            转唤UI标签
            </summary>
            <param name="inputStr">模板内容</param>
            <param name="Inherits">引用的类名称</param>
            <returns></returns>
        </member>
        <member name="M:System.TemplateEngine.PageBase.UIConfig(System.String)">
            <summary>
            转唤UI标签
            </summary>
            <param name="inputStr">模板内容</param>
            <param name="Inherits">引用的类名称</param>
            <returns></returns>
        </member>
        <member name="M:System.TemplateEngine.PageBase.ConverLable(System.Web.HttpContext,System.String)">
            <summary>
            转换Tag标签
            </summary>
            <param name="inputStr">模板内容</param>
            <param name="Inherits">引用的类名称</param>
            <returns></returns>
        </member>
        <member name="M:System.TemplateEngine.PageBase.GetRequestParam(System.String)">
            <summary>
            获得参数对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:System.TemplateEngine.PageBase.ConverLable(System.String,System.Data.KeyValue[])">
            <summary>
            获取模板内容
            </summary>
            <param name="fileName">模板文件的文件名称</param>
            <returns></returns>
        </member>
        <member name="M:System.TemplateEngine.PageBase.GetHtml(System.String)">
            <summary>
            传入模板文件的地址
            </summary>
            <param name="templatefile"></param>
            <returns></returns>
        </member>
        <member name="P:System.TemplateEngine.PageBase.Params">
            <summary>
            传递的参数集合
            </summary>
        </member>
        <member name="P:System.TemplateEngine.PageBase.ThisContext">
            <summary>
            当前请求
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:System.TemplateEngine.PageBase.SkinName">
            <summary>
            风格名称
            </summary>
        </member>
        <member name="P:System.TemplateEngine.PageBase.SkinRoot">
            <summary>
            风格名称
            </summary>
        </member>
        <member name="F:System.Web.PageBase.helper">
            <summary>
            AshxHelper对象
            </summary>
        </member>
        <member name="F:System.Web.BaseHandle.helper">
            <summary>
            AshxHelper对象
            </summary>
        </member>
        <member name="T:System.UrlInfo">
            <summary>
            封装了 url 的一些基本信息。
            </summary>
            <example>
            如下的网址
            <code>
            Uri uri = new Uri( "http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top" );
            UrlInfo u = new UrlInfo( uri, "/myapp/", "myPathInfo" );
            </code>
            返回的结果是
            <code>
            Scheme=>http
            UserName=>zhangsan
            Password=>123
            Host=>www.abc.com
            Port=>80
            Path=>/myapp/Photo/1984
            PathAndQuery=>/myapp/Photo/1984?title=eee
            PathInfo=>myPathInfo
            PathAndQueryWithouApp=>/Photo/1984?title=eee
            Query=>?title=eee
            Fragment=>#top
            SiteUrl=>http://zhangsan:123@www.abc.com
            SiteAndAppPath=>http://zhangsan:123@www.abc.com/myapp/
            </code>
            </example>
        </member>
        <member name="M:System.UrlInfo.ToString">
            <summary>
            完整的网址路径，包括http前缀以及query string等所有信息；相当于直接拷贝浏览器地址栏的网址。
            </summary>
            <returns></returns>
        </member>
        <member name="P:System.UrlInfo.AppPath">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 /myapp/
            </summary>
        </member>
        <member name="P:System.UrlInfo.Scheme">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 http
            </summary>
        </member>
        <member name="P:System.UrlInfo.UserName">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 zhangsan
            </summary>
        </member>
        <member name="P:System.UrlInfo.Password">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 123
            </summary>
        </member>
        <member name="P:System.UrlInfo.Host">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 www.abc.com
            </summary>
        </member>
        <member name="P:System.UrlInfo.Port">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 80
            </summary>
        </member>
        <member name="P:System.UrlInfo.Path">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 /myapp/Photo/1984
            </summary>
        </member>
        <member name="P:System.UrlInfo.Query">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 ?title=eee
            </summary>
        </member>
        <member name="P:System.UrlInfo.Fragment">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 #top
            </summary>
        </member>
        <member name="P:System.UrlInfo.PathAndQuery">
            <summary>
            网站根目录之后的路径(如果当前应用放在虚拟目录中，则包括虚拟目录)，例如
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 /myapp/Photo/1984?title=eee
            </summary>
        </member>
        <member name="P:System.UrlInfo.PathAndQueryWithouApp">
            <summary>
            不包括网站域名和虚拟目录的完整路径，前面包括斜杠"/"。例如
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 /Photo/1984?title=eee
            </summary>
        </member>
        <member name="P:System.UrlInfo.SiteUrl">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 http://zhangsan:123@www.abc.com
            </summary>
        </member>
        <member name="P:System.UrlInfo.SiteAndAppPath">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 http://zhangsan:123@www.abc.com/myapp/
            </summary>
        </member>
        <member name="P:System.UrlInfo.UriBuilder">
            <summary>
            获取 UriBuilder 对象
            </summary>
        </member>
        <member name="P:System.UrlInfo.EncodeUrl">
            <summary>
            返回编码过(Server.UrlEncode)的完整 url 
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.ORM.Query">
            <summary>
            查询对象
            </summary>
        </member>
        <member name="M:System.ORM.Query.select(System.String)">
            <summary>
            (本方法不建议使用)只查询指定的属性，本来用于提高性能，但和缓存会起冲突。
            </summary>
            <param name="propertyString"></param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.Query.set(System.String,System.Object)">
            <summary>
            给查询条件中的参数赋值
            </summary>
            <param name="name">参数名称</param>
            <param name="val">参数值</param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.Query.count">
            <summary>
            统计符合查询条件的结果数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.ORM.Query.first">
            <summary>
            返回符合查询条件的第一条结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.ORM.Query.get(System.String)">
            <summary>
            获取所有结果的某个属性的字符串集合，比如 get( "Id" ) 返回 "2, 7, 16, 25"
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.Query.list">
            <summary>
            返回查询的所有结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.ORM.Query.list(System.Int32)">
            <summary>
            返回符合查询条件的前 n 条结果
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.Query.listChildren(System.String)">
            <summary>
            将所有结果对象的某个实体属性封装成集合返回
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.Query.listChildren(System.String,System.Int32)">
            <summary>
            将所有结果对象的某个实体属性封装成集合返回
            </summary>
            <param name="propertyName"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:System.ORM.LabelAttribute">
            <summary>
            label 批注，用于表单代码的自动生成
            </summary>
        </member>
        <member name="T:System.Log.LogLevel">
            <summary>
            日志的等级
            </summary>
        </member>
        <member name="F:System.Log.LogLevel.None">
            <summary>
            无等级
            </summary>
        </member>
        <member name="F:System.Log.LogLevel.Fatal">
            <summary>
            崩溃信息日志
            </summary>
        </member>
        <member name="F:System.Log.LogLevel.Error">
            <summary>
            错误信息日志
            </summary>
        </member>
        <member name="F:System.Log.LogLevel.Warn">
            <summary>
            警告信息日志
            </summary>
        </member>
        <member name="F:System.Log.LogLevel.Info">
            <summary>
            普通信息日志
            </summary>
        </member>
        <member name="F:System.Log.LogLevel.Debug">
            <summary>
            调试信息日志
            </summary>
        </member>
        <member name="F:System.Log.LogLevel.All">
            <summary>
            全部等级
            </summary>
        </member>
        <member name="T:System.Data.MysqlFactory">
            <summary>
            mysql 数据工厂，获取 Connection, Command, DataAdapter
            </summary>
            <summary>
            mysql 数据工厂，获取 Connection, Command, DataAdapter
            </summary>
        </member>
        <member name="T:System.Encryptor">
            <summary>
            HASH算法加密工具类
            </summary>
        </member>
        <member name="M:System.Encryptor.Md5Encryptor32(System.String,System.Int32)">
            <summary>
            32位MD5算法加密
            </summary>
            <param name="str">需要加密的字符串</param>
            <param name="time">需要加密的次数</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:System.Encryptor.Md5Encryptor32(System.String,System.Int32,System.Int32)">
            <summary>
            32位MD5算法加密
            </summary>
            <param name="str">需要加密的字符串</param>
            <param name="time">需要加密的次数</param>
            <param name="length">加密的长度32或16</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:System.Encryptor.Md5Encryptor32(System.String)">
            <summary>
            32位MD5算法加密
            </summary>
            <param name="str">需要加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:System.Encryptor.Md5Encryptor16(System.String)">
            <summary>
            16位MD5算法加密
            </summary>
            <param name="str">需要加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:System.Encryptor.DesEncrypt(System.String,System.String)">
            <summary>
            加密原函数
            </summary>
            <param name="pToEncrypt">加密前的明文</param>
            <param name="sKey">Key</param>
            <returns>返回加密后的密文</returns>
        </member>
        <member name="M:System.Encryptor.DesDecrypt(System.String,System.String)">
            <summary>
            解密原函数
            </summary>
            <param name="pToDecrypt">加密后的密文</param>
            <param name="sKey">Key</param>
            <returns>返回加密前的明文</returns>
        </member>
        <member name="T:System.Serialization.JSON">
            <summary>
            封装了 json 反序列化中的常见操作：将 json 字符串反序列化为对象、对象列表、字典等。
            序列化工具见 JsonString
            </summary>
        </member>
        <member name="M:System.Serialization.JSON.ToObject(System.String,System.Type)">
            <summary>
            将 json 字符串反序列化为对象
            </summary>
            <param name="oneJsonString">json 字符串</param>
            <param name="t">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:System.Serialization.JSON.ToObject``1(System.String)">
            <summary>
            将 json 字符串反序列化为对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString">json 字符串</param>
            <returns></returns>
        </member>
        <member name="M:System.Serialization.JSON.ToList``1(System.String)">
            <summary>
            将 json 字符串反序列化为对象列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString">json 字符串</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:System.Serialization.JSON.ToDictionaryList(System.String)">
            <summary>
            将 json 字符串反序列化为字典对象的列表
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:System.Serialization.JSON.ToDictionary(System.String)">
            <summary>
            将 json 字符串反序列化为字典对象
            </summary>
            <param name="oneJsonString"></param>
            <returns></returns>
        </member>
        <member name="M:System.Serialization.JSON.Encode(System.String)">
            <summary>
            将引号、冒号、逗号进行编码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.Serialization.JSON.Decode(System.String)">
            <summary>
            将引号、冒号、逗号进行解码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.Serialization.JSON.DicToString(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            将字典序列化为 json 字符串
            </summary>
            <param name="dic"></param>
            <returns></returns>
        </member>
        <member name="T:System.RegPattern">
            <summary>
            封装了几个常用的正则表达式
            </summary>
        </member>
        <member name="F:System.RegPattern.Url">
            <summary>
            网址的正则表达式
            </summary>
        </member>
        <member name="F:System.RegPattern.Email">
            <summary>
            email 正则表达式
            </summary>
        </member>
        <member name="F:System.RegPattern.Currency">
            <summary>
            货币值(小数)的正则表达式
            </summary>
        </member>
        <member name="F:System.RegPattern.NegativeCurrency">
            <summary>
            (负数)货币值(小数)的正则表达式
            </summary>
        </member>
        <member name="F:System.RegPattern.Img">
            <summary>
            html 页面中图片的正则表达式，获取&lt;img src="" /&gt; 的src部分
            </summary>
        </member>
        <member name="M:System.RegPattern.IsMatch(System.String,System.String)">
            <summary>
            检查 input 字符串是否和指定的正则表达式匹配
            </summary>
            <param name="input">需要检查的字符串</param>
            <param name="pattern">正则表达式</param>
            <returns></returns>
        </member>
        <member name="T:System.ORM.Caching.ApplicationPool">
            <summary>
            二级缓存(application级)的缓存池
            </summary>
        </member>
        <member name="T:System.Entity">
            <summary>
            实体类常用方法
            </summary>
        </member>
        <member name="M:System.Entity.New(System.String)">
            <summary>
            根据类型全名，创建持久化对象
            </summary>
            <param name="typeFullName">类型的全名</param>
            <returns>返回一个 IEntity 持久化对象</returns>
        </member>
        <member name="M:System.Entity.GetInfo(System.Type)">
            <summary>
            获取类型 t 的元数据信息
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:System.Entity.GetInfo(System.String)">
            <summary>
            获取类型 typeFullName 的元数据信息
            </summary>
            <param name="typeFullName">类型全名，包括namespace，但不包括程序集</param>
            <returns></returns>
        </member>
        <member name="M:System.Entity.GetInfo(System.Object)">
            <summary>
            获取对象 obj 的元数据信息
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.Entity.GetType(System.String)">
            <summary>
            根据全名获取类型
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="T:System.db">
            <summary>
            XCenter ORM 最主要的工具，集中了对象的常用 CRUD (读取/插入/更新/删除) 操作。主要方法都是泛型方法。
            </summary>
        </member>
        <member name="M:System.db.findAll``1">
            <summary>
            查询 T 类型对象的所有数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.db.findById``1(System.Int32)">
            <summary>
            根据 id 查询对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:System.db.find``1(System.String)">
            <summary>
            根据查询条件，返回一个查询对象。一般用于参数化查询。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">查询条件</param>
            <returns>返回查询对象xQuery，可以进一步参数化赋值，并得到结果</returns>
        </member>
        <member name="M:System.db.findPage``1(System.String)">
            <summary>
            根据查询条件，返回分页数据集合(默认每页返回20条记录)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">查询条件</param>
            <returns>分页数据列表，包括当前页、总记录数、分页条等</returns>
        </member>
        <member name="M:System.db.findPageArchive``1(System.String)">
            <summary>
            存档模式翻页(默认按照 order by Oid asc 排序)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">查询条件</param>
            <returns>分页数据列表，包括当前页、总记录数、分页条等</returns>
        </member>
        <member name="M:System.db.findPageArchive``1(System.String,System.Int32)">
            <summary>
            存档模式翻页(默认按照 order by Oid asc 排序)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">查询条件</param>
            <param name="pageSize">每页需要显示的数据量</param>
            <returns>分页数据列表，包括当前页、总记录数、分页条等</returns>
        </member>
        <member name="M:System.db.findPage``1(System.String,System.Int32)">
            <summary>
            根据查询条件、每页数量，返回分页数据集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">查询条件</param>
            <param name="pageSize">每页需要显示的数据量</param>
            <returns>分页数据列表，包括当前页、总记录数、分页条等</returns>
        </member>
        <member name="M:System.db.findPage``1(System.String,System.Int32,System.Int32)">
            <summary>
            根据查询条件、当前页码和每页数量，返回分页数据集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">查询条件</param>
            <param name="current">当前页码</param>
            <param name="pageSize">每页需要显示的数据量</param>
            <returns>分页数据列表，包括当前页、总记录数、分页条等</returns>
        </member>
        <member name="M:System.db.findBySql``1(System.String)">
            <summary>
            根据 sql 语句，返回对象列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:System.db.insert(System.Object)">
            <summary>
            将对象插入数据库
            </summary>
            <param name="obj"></param>
            <returns>返回一个结果对象 Result。如果发生错误，则 Result 中包含错误信息；如果没有错误，result.Info即是obj</returns>
        </member>
        <member name="M:System.db.update(System.Object)">
            <summary>
            更新对象，并存入数据库
            </summary>
            <param name="obj"></param>
            <returns>返回一个结果对象 Result。如果发生错误，则 Result 中包含错误信息</returns>
        </member>
        <member name="M:System.db.Save(System.Object)">
            <summary>
            保存对象，自动判断新增或更新
            </summary>
            <param name="obj"></param>
            <returns>返回一个结果对象 Result。如果发生错误，则 Result 中包含错误信息</returns>
        </member>
        <member name="M:System.db.update(System.Object,System.String)">
            <summary>
            只修改对象的某个特定属性
            </summary>
            <param name="obj"></param>
            <param name="propertyName">需要修改的属性名称</param>
        </member>
        <member name="M:System.db.update(System.Object,System.String[])">
            <summary>
            只修改对象的特定属性
            </summary>
            <param name="obj"></param>
            <param name="arrPropertyName">需要修改的属性的数组</param>
        </member>
        <member name="M:System.db.updateBatch``1(System.String,System.String)">
            <summary>
            根据条件批量更新对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">更新的操作</param>
            <param name="condition">更新的条件</param>
        </member>
        <member name="M:System.db.delete(System.Object)">
            <summary>
            删除数据
            </summary>
            <param name="obj"></param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:System.db.delete``1(System.Int32)">
            <summary>
            根据 id 删除数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">对象的 id</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:System.db.deleteBatch``1(System.String)">
            <summary>
            根据条件批量删除数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">删除条件</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:System.db.count``1">
            <summary>
            统计对象的所有数目
            </summary>
            <typeparam name="T"></typeparam>
            <returns>对象数量</returns>
        </member>
        <member name="M:System.db.count``1(System.String)">
            <summary>
            根据条件统计对象的所有数目
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">统计条件</param>
            <returns>对象数量</returns>
        </member>
        <member name="M:System.db.RunReader``1(System.String)">
            <summary>
            根据 sql 语句查询，返回一个 IDataReader
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <returns>返回一个 IDataReader</returns>
        </member>
        <member name="M:System.db.RunScalar``1(System.String)">
            <summary>
            根据 sql 语句查询，返回单行单列数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <returns>返回单行单列数据</returns>
        </member>
        <member name="M:System.db.RunSql``1(System.String)">
            <summary>
            执行 sql 语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
        </member>
        <member name="M:System.db.RunTable``1(System.String)">
            <summary>
            根据 sql 语句查询，返回一个 DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:System.db.BeginTransaction">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:System.db.CommitTransaction">
            <summary>
            提交事务并关闭连接
            </summary>
        </member>
        <member name="M:System.db.RollBackTransaction">
            <summary>
            回滚事务并关闭连接
            </summary>
        </member>
        <member name="P:System.db.nocache">
            <summary>
            返回一个不经过缓存的查询工具，用于直接从数据库检索数据
            </summary>
        </member>
        <member name="T:System.Data.ConnectionItemType">
            <summary>
            数据库连接项的类型
            </summary>
        </member>
        <member name="T:System.ORM.Caching.CacheTime">
            <summary>
            对象的缓存时间管理工具
            </summary>
        </member>
        <member name="T:System.ORM.LongAttribute">
            <summary>
            长整型批注，可以保存长整型数据。
            数据库存储的时候，使用长整型进行存储
            </summary>
        </member>
        <member name="T:System.ORM.ICacheAttribute">
            <summary>
            缓存批注的接口
            </summary>
        </member>
        <member name="T:System.Log.LoggerUtil">
            <summary>
            日志处理工具
            </summary>
        </member>
        <member name="F:System.Log.LoggerUtil.SqlPrefix">
            <summary>
            sql 日志的前缀
            </summary>
        </member>
        <member name="M:System.Log.LoggerUtil.WriteFile(System.Log.ILogMsg)">
            <summary>
            将日志写入磁盘
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:System.Log.LoggerUtil.WriteFileNow(System.Log.ILogMsg)">
            <summary>
            将日志写入磁盘
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:System.Log.LoggerUtil.LogSqlCount">
            <summary>
            在 web 系统中，记录 sql 执行的次数
            </summary>
        </member>
        <member name="M:System.Log.LoggerUtil.Flush">
            <summary>
            将所有日志即可写入磁盘
            </summary>
        </member>
        <member name="T:System.Data.DatabaseType">
            <summary>
            XCenter ORM 支持的数据库类型
            </summary>
        </member>
        <member name="T:System.ORM.ObjectInfo">
            <summary>
            对象查询的附件信息
            </summary>
        </member>
        <member name="P:System.ORM.ObjectInfo.Order">
            <summary>
            只接受两种赋值：asc或者desc
            </summary>
        </member>
        <member name="T:System.ORM.TinyIntAttribute">
            <summary>
            小型整数批注，标识此属性对应的数据列为小型整数
            </summary>
        </member>
        <member name="T:System.ORM.MoneyAttribute">
            <summary>
            货币批注，可以保存货币类型数据。
            此批注只能用在dotnet的decimal数据类型上。数据库存储的时候，使用的精度为：总位数19, 小数点后4位
            </summary>
        </member>
        <member name="T:System.ILog">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="M:System.ILog.Debug(System.String)">
            <summary>
            调试信息日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:System.ILog.Info(System.String)">
            <summary>
            普通信息日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:System.ILog.Warn(System.String)">
            <summary>
            警告信息日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:System.ILog.Error(System.String)">
            <summary>
            错误信息日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:System.ILog.Fatal(System.String)">
            <summary>
            崩溃信息日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:System.ILog.Code(System.String,System.Int32)">
            <summary>
            记录代码执行情况信息日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:System.ILog.TypeName">
            <summary>
            输出日志的类型名称
            </summary>
        </member>
        <member name="M:System.IO.XMLHelper.AddData(System.String,System.String,System.IO.XmlParamter[])">
            <summary>
            添加数据（以ID作为自增长字段）
            </summary>
            <param name="path">文件路径</param>
            <param name="tableName">表名称</param>
            <param name="param">字段列表</param>
            <returns>返回identity值</returns>
        </member>
        <member name="M:System.IO.XMLHelper.AddData(System.String,System.String,System.String,System.IO.XmlParamter[])">
            <summary>
            添加数据
            </summary>
            <param name="identity">自动增长的字段</param>
            <param name="path">文件路径</param>
            <param name="tableName">表名称</param>
            <param name="param">字段列表</param>
            <returns>返回identity值</returns>
        </member>
        <member name="T:System.IO.DataTypeConvert">
            <summary>
            数据类型转换
            </summary>
        </member>
        <member name="M:System.IO.DataTypeConvert.ConvertToInt(System.String)">
            <summary>
            字符串转换为整数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DataTypeConvert.ConvertToDateTime(System.String)">
            <summary>
            字符串转换为时间
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DataTypeConvert.ConvertToDecimal(System.String)">
            <summary>
            字符串转换为实数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.IO.DataTypeConvert.ConvertToBoolean(System.String)">
            <summary>
            字符串转换为布尔类型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:System.IO.XmlParamter.Name">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:System.IO.XmlParamter.Value">
            <summary>
            属性值
            </summary>
        </member>
        <member name="T:System.Data.KeyValue">
            <summary>
            KeyValue
            </summary>
        </member>
        <member name="M:System.Data.KeyValue.#ctor">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:System.Data.KeyValue.#ctor(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:System.Data.KeyValue.SetValue(System.Object)">
            <summary>
            参数值
            </summary>
        </member>
        <member name="M:System.Data.KeyValue.Create(System.String,System.String)">
            <summary>
            创建参数对象
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.KeyValue.Create(System.String,System.Object)">
            <summary>
            创建参数对象
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.KeyValue.CompareByKey(System.Data.KeyValue,System.Data.KeyValue)">
            <summary>
            根据Key排列
            </summary>
            <param name="kv1"></param>
            <param name="kv2"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.KeyValue.CompareByKeyDesc(System.Data.KeyValue,System.Data.KeyValue)">
            <summary>
            根据Key倒序排列
            </summary>
            <param name="kv1"></param>
            <param name="kv2"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.KeyValue.CompareByValue(System.Data.KeyValue,System.Data.KeyValue)">
            <summary>
            根据Value排列
            </summary>
            <param name="kv1"></param>
            <param name="kv2"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.KeyValue.CompareByValueDesc(System.Data.KeyValue,System.Data.KeyValue)">
            <summary>
            根据Value倒序排列
            </summary>
            <param name="kv1"></param>
            <param name="kv2"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.KeyValue.CompareTo(System.Object)">
            <summary>
            根据Key进行比较
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.KeyValue.ConvertArrayToString(System.Array)">
            <summary>
            将数组转为字符串
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.KeyValue.ToEncodedString">
            <summary>
            生成encode字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:System.Data.KeyValue.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:System.Data.KeyValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:System.Data.KeyValue.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:System.Data.KeyValue.UpdateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:System.Data.KeyValue.EncodedValue">
            <summary>
            获取参数值
            </summary>
        </member>
        <member name="T:System.Data.MsSqlDbFactory">
            <summary>
            sqlserver 数据工厂，获取 Connection, Command, DataAdapter
            </summary>
        </member>
        <member name="T:System.ORM.MetaList">
            <summary>
            元数据列表
            </summary>
        </member>
        <member name="T:System.ORM.HtmlTextAttribute">
            <summary>
            html 文本批注，表明此属性允许接受 html 风格的文本
            </summary>
        </member>
        <member name="T:System.Caching.SysCache">
            <summary>
            .net 自带的 InMemory 缓存
            </summary>
        </member>
        <member name="M:System.Caching.SysCache.Get(System.String)">
            <summary>
            从缓存中获取值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:System.Caching.SysCache.Put(System.String,System.Object)">
            <summary>
            将对象放入缓存，如果缓存中已有此项，则替换。a)永不过期，b)优先级为 Normal，c)没有缓存依赖项
            </summary>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:System.Caching.SysCache.Put(System.String,System.Object,System.Int32)">
            <summary>
            将对象放入缓存，在参数 seconds 指定的秒数之后过期
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:System.Caching.SysCache.PutSliding(System.String,System.Object,System.Int32)">
            <summary>
            将对象放入缓存，在最后一次访问之后的 seconds 秒数之后过期（弹性过期）
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:System.Caching.SysCache.Remove(System.String)">
            <summary>
            从缓存中移除某项
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:System.Json">
            <summary>
            XCenter Json转换工具。
            </summary>
        </member>
        <member name="M:System.Json.ToObject(System.String,System.Type)">
            <summary>
            将 json 字符串反序列化为对象
            </summary>
            <param name="oneJsonString">json 字符串</param>
            <param name="t">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:System.Json.ToObject``1(System.String)">
            <summary>
            将 json 字符串反序列化为对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString">json 字符串</param>
            <returns></returns>
        </member>
        <member name="M:System.Json.ToString(System.Object)">
            <summary>
            将对象序列化为json字符串,不支持子对象(即属性为对象)的序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:System.Json.ToStringEx(System.Object)">
            <summary>
            将对象序列化为json字符串,支持子对象(即属性为对象)的序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:System.Json.ToStringList(System.Collections.IList)">
            <summary>
            将对象集合序列化为json字符串,不支持子对象(即属性为对象)的序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:System.Json.ToList``1(System.String)">
            <summary>
            将 json 字符串反序列化为对象列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString">json 字符串</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:System.Tool.GetConfiger(System.String)">
            <summary>
            获取Configer内容（先查找KeyValue内容，再查找Web.Config）
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:System.Rand">
            <summary>
            生成随机内容
            </summary>
        </member>
        <member name="M:System.Rand.Number(System.Int32)">
            <summary>
            生成随机数字
            </summary>
            <param name="length">生成长度</param>
            <returns></returns>
        </member>
        <member name="M:System.Rand.Number(System.Int32,System.Boolean)">
            <summary>
            生成随机数字
            </summary>
            <param name="Length">生成长度</param>
            <param name="Sleep">是否要在生成前将当前线程阻止以避免重复</param>
            <returns></returns>
        </member>
        <member name="M:System.Rand.Str(System.Int32)">
            <summary>
            生成随机字母与数字
            </summary>
            <param name="IntStr">生成长度</param>
            <returns></returns>
        </member>
        <member name="M:System.Rand.Str(System.Int32,System.Boolean)">
            <summary>
            生成随机字母与数字
            </summary>
            <param name="Length">生成长度</param>
            <param name="Sleep">是否要在生成前将当前线程阻止以避免重复</param>
            <returns></returns>
        </member>
        <member name="M:System.Rand.Str_char(System.Int32)">
            <summary>
            生成随机纯字母随机数
            </summary>
            <param name="IntStr">生成长度</param>
            <returns></returns>
        </member>
        <member name="M:System.Rand.Str_char(System.Int32,System.Boolean)">
            <summary>
            生成随机纯字母随机数
            </summary>
            <param name="Length">生成长度</param>
            <param name="Sleep">是否要在生成前将当前线程阻止以避免重复</param>
            <returns></returns>
        </member>
        <member name="M:System.DateTools.ConvertToWin(System.String)">
            <summary>
            将nuix中的日期格式转换成正常日期格式，前提传入的格式正确
            </summary>
            <param name="timestampString">传入的时间戳</param>
            <returns></returns>
        </member>
        <member name="M:System.DateTools.ConvertToDateTime(System.Int64)">
            <summary>
            将nuix中的日期格式转换成日期时间
            </summary>
            <param name="timestampString">传入的时间戳</param>
            <returns></returns>
        </member>
        <member name="M:System.DateTools.ConvertToDateTime(System.String)">
            <summary>
            将nuix中的日期格式转换成日期时间
            </summary>
            <param name="timestampString">传入的时间戳</param>
            <returns></returns>
        </member>
        <member name="M:System.DateTools.ConvertToUnix">
            <summary>
            将当前日期时间转换成unix日期时间戳格式
            </summary>
            <returns>unix时间</returns>
        </member>
        <member name="M:System.DateTools.ConvertToUnixofLong">
            <summary>
            将当前日期时间转换成unix日期时间戳格式
            </summary>
            <returns>unix时间</returns>
        </member>
        <member name="M:System.DateTools.ConvertToUnix(System.DateTime)">
            <summary>
            将正常的日期转换成unix日期时间戳格式
            </summary>
            <param name="datetime">正常日期转换成的字符串格式如：yyyy-MM-dd HH:mm:ss</param>
            <returns>unix时间</returns>
        </member>
        <member name="T:System.Web.CurrentRequest">
            <summary>
            当前请求范围中的数据，方便静态方法调用
            </summary>
        </member>
        <member name="T:System.TemplateEngine.TempInfo">
            <summary>
            模版引擎信息
            </summary>
        </member>
        <member name="F:System.TemplateEngine.TempInfo.tags">
            <summary>
            标签列表
            </summary>
        </member>
        <member name="P:System.TemplateEngine.TempInfo.Tags">
            <summary>
            标签列表
            </summary>
        </member>
        <member name="T:System.TemplateEngine.XCoreModule">
            <summary>
            请求处理程序，WebConfig中设置由本程序接管请求
            如
            <httpModules>
                <add type="System.Web.XCoreModule" name="XCoreModule"/>
            </httpModules>
            如需要使用CMS系统，则添加<add type="System.TemplateEngine.TeModule" name="TeModule"/>
            </summary>
        </member>
        <member name="M:System.TemplateEngine.XCoreModule.AddParameter(System.Data.KeyValue,System.Collections.Generic.List{System.Data.KeyValue}@)">
            <summary>
            将一个参数加入参数队列
            </summary>
            <param name="lp">标签参数</param>
            <param name="list">列表</param>
        </member>
        <member name="T:System.TemplateEngine.TeConfig">
            <summary>
            模板引擎的配置
            </summary>
        </member>
        <member name="F:System.TemplateEngine.TeConfig.Instance">
            <summary>
            配置的缓存内容(单例模式缓存)
            </summary>
        </member>
        <member name="P:System.TemplateEngine.TeConfig.PageSuffix">
            <summary>
            需要接管的后缀名(默认为.aspx)
            </summary>
        </member>
        <member name="P:System.TemplateEngine.TeConfig.TemplatePageSuffix">
            <summary>
            模板文件的后缀名
            </summary>
        </member>
        <member name="P:System.TemplateEngine.TeConfig.TemplateFolder">
            <summary>
            模板文件所在目录
            </summary>
        </member>
        <member name="P:System.TemplateEngine.TeConfig.CurrentSkin">
            <summary>
            默认模版目录名称(值为default)
            </summary>
        </member>
        <member name="P:System.TemplateEngine.TeConfig.ClassPage">
            <summary>
            父级页面列表
            </summary>
        </member>
        <member name="P:System.TemplateEngine.TeConfig.ArticlePage">
            <summary>
            内容页面列表
            </summary>
        </member>
        <member name="P:System.TemplateEngine.TeConfig.OptimizeMode">
            <summary>
            反射优化模式，目前只实现了 CodeDom 方式
            </summary>
        </member>
        <member name="T:System.Result">
            <summary>
            对结果信息的封装(有效或错误)，在ORM和MVC中经常被使用
            </summary>
        </member>
        <member name="M:System.Result.#ctor(System.String)">
            <summary>
            根据错误信息构建 result
            </summary>
            <param name="errorMsg"></param>
        </member>
        <member name="M:System.Result.Add(System.String)">
            <summary>
            添加错误信息
            </summary>
            <param name="errorMsg"></param>
        </member>
        <member name="M:System.Result.Join(System.Result)">
            <summary>
            合并结果信息
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:System.Result.AutoShow">
            <summary>
            是否自动显示(默认都是自动显示的，比如表单验证发生错误会自动显示在表单上方)
            </summary>
        </member>
        <member name="P:System.Result.Errors">
            <summary>
            获取所有错误信息的列表
            </summary>
        </member>
        <member name="P:System.Result.ErrorsHtml">
            <summary>
            html 格式的错误信息(封装在一个class=XCenterValidationResultList的无序列表ul中)
            </summary>
        </member>
        <member name="P:System.Result.ErrorsText">
            <summary>
            纯文本格式的错误信息，包括换行符。
            </summary>
        </member>
        <member name="P:System.Result.ErrorsJson">
            <summary>
            Json 格式的错误信息。格式 {"IsValid":false, "Msg":"请填写作者名称,请填写评论内容,验证码错误"}
            </summary>
        </member>
        <member name="P:System.Result.Info">
            <summary>
            附带的对象
            </summary>
        </member>
        <member name="P:System.Result.HasErrors">
            <summary>
            结果是否包含错误
            </summary>
        </member>
        <member name="P:System.Result.IsValid">
            <summary>
            结果是否全部正确有效
            </summary>
        </member>
        <member name="T:System.Reflection.IAccessorUtil">
            <summary>
            属性处理器工具
            </summary>
        </member>
        <member name="M:System.ORM.Utils.ValueSetter.setEntityByCheckNull(System.IEntity,System.ORM.EntityPropertyInfo,System.Object,System.Int32)">
            <summary>
            1.5新增，针对已删除用户应用 null object 模式
            </summary>
            <param name="obj"></param>
            <param name="ep"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="T:System.ORM.ObjectDB">
            <summary>
            数据访问工具
            </summary>
        </member>
        <member name="T:System.ORM.ValidationAttribute">
            <summary>
            验证批注的抽象基类。如果要自定义验证批注，请通过继承此基类扩展
            </summary>
        </member>
        <member name="M:System.ORM.ValidationAttribute.Validate(System.String,System.IEntity,System.ORM.EntityPropertyInfo,System.Result)">
            <summary>
            可以扩展的验证方法
            </summary>
            <param name="action">当前操作：update或insert</param>
            <param name="target">需要验证的实体对象</param>
            <param name="info">当前属性信息</param>
            <param name="result">验证结果</param>
        </member>
        <member name="P:System.ORM.ValidationAttribute.Message">
            <summary>
            错误提示信息
            </summary>
        </member>
        <member name="P:System.ORM.ValidationAttribute.Lang">
            <summary>
            多国语言化的错误提示信息
            </summary>
        </member>
        <member name="T:System.ORM.EmailAttribute">
            <summary>
            email 批注，验证对象的属性是否是合法的 email
            </summary>
        </member>
        <member name="T:System.ORM.PatternAttribute">
            <summary>
            正则表达式批注，验证属性的对象是否符合指定的正则表达式
            </summary>
        </member>
        <member name="T:System.IO.WindowsPath">
            <summary>
            Windows系统下的文件路径
            </summary>
        </member>
        <member name="T:System.IO.PathTool">
            <summary>
            路径辅助工具
            </summary>
        </member>
        <member name="M:System.IO.PathTool.CombineAbs(System.String[])">
            <summary>
            获取字符串格式的路径（Windows为“\”，Linux为“/”）
            </summary>
            <param name="arrPath">分级的目录路径</param>
            <returns>完整的字符串</returns>
        </member>
        <member name="M:System.IO.PathTool.Map(System.String)">
            <summary>
            将路径转换为物理路径
            </summary>
            <param name="path">路径</param>
            <returns>物理路径</returns>
        </member>
        <member name="M:System.IO.PathTool.getInstance">
            <summary>
            自动根据系统获取相应的辅助实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathTool.ServerMap(System.String)">
            <summary>
            自动根据系统获取相应的辅助实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathTool.GetBinDirectory">
            <summary>
            bin 的绝对路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.WindowsPath.CombineAbs(System.String[])">
            <summary>
            获取字符串格式的路径（Windows为“\”）
            </summary>
            <param name="arrPath">分级的目录路径</param>
            <returns>完整的字符串</returns>
        </member>
        <member name="M:System.IO.WindowsPath.Map(System.String)">
            <summary>
            将路径转换为物理路径（Windows为“\”）
            </summary>
            <param name="path">路径</param>
            <returns>物理路径</returns>
        </member>
        <member name="T:System.Rest">
            <summary>
            请求处理程序，请在WebConfig中设置由本程序接管请求
            如
            <httpModules>
                <add type="System.Rest" name="XCoreRest"/>
            </httpModules>
            或在Global.asax中设置
            protected void Application_BeginRequest(object sender, EventArgs e)
            {
                System.Rest.RunAction(Context);
            }
            </summary>
        </member>
        <member name="M:System.Rest.GetParamsFromRequest(System.Web.HttpRequest)">
            <summary>
            获取API提交的参数
            </summary>
            <param name="request">Request对象</param>
            <returns>参数数组</returns>
        </member>
        <member name="P:System.Rest.DllName">
            <summary>
            Rest接口的DLL名称，不带后缀名（默认为Wlniao）
            cfgHelper.GetAppSettings("ActionDllName")
            </summary>
        </member>
        <member name="P:System.Rest.NameSpace">
            <summary>
            Rest接口的命名空间（默认为空）
            cfgHelper.GetAppSettings("ActionNameSpace")
            </summary>
        </member>
        <member name="T:System.RestAction">
            <summary>
            需要通过统一Rest调用的方法的基类
            </summary>
        </member>
        <member name="P:System.RestAction.ctx">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="T:System.Data.AccessFactory">
            <summary>
            access 数据工厂，获取 Connection, Command, DataAdapter
            </summary>
            <summary>
            access 数据工厂，获取 Connection, Command, DataAdapter
            </summary>
        </member>
        <member name="T:System.Caching.CacheManager">
            <summary>
            缓存管理器
            </summary>
        </member>
        <member name="M:System.Caching.CacheManager.GetApplicationCache">
            <summary>
            获取 ApplicationCache
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.ORM.NoCacheDbFinder">
            <summary>
            绕过缓存，直接访问数据库
            </summary>
        </member>
        <member name="T:System.ORM.IInterceptor">
            <summary>
            拦截器接口，用户可以通过自定义拦截器，在插入前或插入后等动作中注入自己的处理逻辑
            </summary>
        </member>
        <member name="T:System.ORM.TableAttribute">
            <summary>
            表名称批注，用于标识对象在数据库中对应的表名称
            </summary>
        </member>
        <member name="T:System.ORM.DateTimeAttribute">
            <summary>
            时间批注，可以保存日期类型数据。
            数据库存储的时候，使用日期类型进行存储
            </summary>
        </member>
        <member name="T:System.Log.FileLogger">
            <summary>
            文件日志工具，所有日志会被写入磁盘
            </summary>
        </member>
        <member name="T:System.LanguageSetting">
            <summary>
            某个语言包配置文件的内容，包括一个名称和一个语言包的 Dictionary
            </summary>
        </member>
        <member name="M:System.LanguageSetting.get(System.String)">
            <summary>
            根据 key 获取语言值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:System.LanguageSetting.getLangMap">
            <summary>
            获取语言的键值对 Dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.IO.LinuxPath">
            <summary>
            Linux系统下的文件路径
            </summary>
        </member>
        <member name="M:System.IO.LinuxPath.CombineAbs(System.String[])">
            <summary>
            获取字符串格式的路径（Linux为“/”）
            </summary>
            <param name="arrPath">分级的目录路径</param>
            <returns>完整的字符串</returns>
        </member>
        <member name="M:System.IO.LinuxPath.Map(System.String)">
            <summary>
            将路径转换为物理路径（Linux为“/”）
            </summary>
            <param name="path">路径</param>
            <returns>物理路径</returns>
        </member>
        <member name="T:System.IDto">
            <summary>
            DTO(Data Transfer Object) 的接口
            </summary>
        </member>
        <member name="M:System.IDto.Init(System.IEntity)">
            <summary>
            将实体类赋值给DTO对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:System.IDto.GetEntity">
            <summary>
            从DTO中获取实体类
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IDto.New">
            <summary>
            创建一个新对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Data.MysqlDialect">
            <summary>
            mysql 特殊语法处理器
            </summary>
        </member>
        <member name="T:System.Data.AccessDialect">
            <summary>
            access 特殊语法处理器
            </summary>
        </member>
        <member name="T:System.Util">
            <summary>
            其它工具栏
            </summary>
        </member>
        <member name="M:System.Util.GetComputerId">
            <summary>
            获取机器码
            </summary>
            <returns>当前主机的机器码</returns>
        </member>
        <member name="M:System.Util.GetRegister">
            <summary>
            获取当前客户端注册信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Util.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式 HW:H:W:Cut</param>    
        </member>
        <member name="T:System.Reflection.CodeRunner">
            <summary>
            代码执行器，可以直接运行代码，输出结果
            </summary>
        </member>
        <member name="T:System.ORM.CacheCountAttribute">
            <summary>
            count 缓存批注
            </summary>
        </member>
        <member name="T:System.DataPage`1">
            <summary>
            封装了 ORM 分页查询的结果集
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:System.DataPage`1.GetEmpty">
            <summary>
            返回空的分页结果集
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.DataPage`1.GetRecentPage(System.String,System.String,System.Int32)">
            <summary>
            最近数据列表的分页栏
            </summary>
            <param name="recentLink">最近数据列表网址(不带页码)</param>
            <param name="archiveLink">存档数据列表网址(不带页码)</param>
            <param name="recentPageCount">最近数据列表需要展示的页数</param>
            <returns></returns>
        </member>
        <member name="M:System.DataPage`1.GetRecentPage(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            最近数据列表的分页栏
            </summary>
            <param name="recentLink">最近数据列表网址(不带页码)</param>
            <param name="archiveLink">存档数据列表网址(不带页码)</param>
            <param name="recentPageCount">最近数据列表需要展示的页数</param>
            <param name="pageWidth">分页栏宽度</param>
            <returns></returns>
        </member>
        <member name="M:System.DataPage`1.GetArchivePage(System.String,System.String,System.Int32)">
            <summary>
            存档数据列表的分页栏
            </summary>
            <param name="recentLink">最近数据列表网址(不带页码)</param>
            <param name="archiveLink">存档数据列表网址(不带页码)</param>
            <param name="recentPageCount">最近数据列表需要展示的页数</param>
            <returns></returns>
        </member>
        <member name="P:System.DataPage`1.Current">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:System.DataPage`1.Size">
            <summary>
            每页数据量
            </summary>
        </member>
        <member name="P:System.DataPage`1.PageBar">
            <summary>
            风转过的 html 分页栏(也可以自定义)
            </summary>
        </member>
        <member name="P:System.DataPage`1.PageCount">
            <summary>
            总页码
            </summary>
        </member>
        <member name="P:System.DataPage`1.RecordCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:System.DataPage`1.Results">
            <summary>
            查询结果：对象的列表
            </summary>
        </member>
        <member name="T:System.Web.Jobs.IWebJobItem">
            <summary>
            计划任务项的接口
            </summary>
        </member>
        <member name="M:System.Web.Jobs.IWebJobItem.Execute">
            <summary>
            任务需要执行的方法
            </summary>
        </member>
        <member name="M:System.Web.Jobs.IWebJobItem.End">
            <summary>
            任务结束时需要执行的方法
            </summary>
        </member>
        <member name="T:System.ORM.EntityPropertyInfo">
            <summary>
            实体类某个属性的元数据信息
            </summary>
        </member>
        <member name="M:System.ORM.EntityPropertyInfo.GetValue(System.Object)">
            <summary>
            获取obj的当前属性的值
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.EntityPropertyInfo.SetValue(System.Object,System.Object)">
            <summary>
            给obj的当前属性赋值
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.Name">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.ColumnName">
            <summary>
            对应的数据列名
            </summary>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.Type">
            <summary>
            属性的类型，比如是int，还是string等等
            </summary>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.Property">
            <summary>
            属性信息(系统自带的元数据)
            </summary>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.ParentEntityInfo">
            <summary>
            本属性所属的实体类信息，比如Blog有一个属性Title，则Title这个属性的ParentEntityInfo就是Blog
            </summary>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.EntityInfo">
            <summary>
            当本属性是实体属性时，此实体属性的信息。比如Blog的实体属性Category的EntityInfo。如果不是实体属性，则为null
            </summary>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.SaveToDB">
            <summary>
            是否保存到数据库(是否打上了NotSave批注)
            </summary>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.IsList">
            <summary>
            是否是列表类型，列表类型不会保存到数据库
            </summary>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.IsEntity">
            <summary>
            是否是实体类属性
            </summary>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.IsAbstractEntity">
            <summary>
            是否是抽象类型实体
            </summary>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.SaveAttribute">
            <summary>
            当前属性的 ColumnAttribute
            </summary>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.LongTextAttribute">
            <summary>
            当前属性的 LongTextAttribute
            </summary>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.DateTimeAttribute">
            <summary>
            当前属性的 DateTimeAttribute
            </summary>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.MoneyAttribute">
            <summary>
            当前属性的 MoneyAttribute
            </summary>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.DecimalAttribute">
            <summary>
            当前属性的 DecimalAttribute
            </summary>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.DefaultAttribute">
            <summary>
            当前属性的 DefaultAttribute
            </summary>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.ValidationAttributes">
            <summary>
            当前属性的 ValidationAttribute 的列表
            </summary>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.PropertyAccessor">
            <summary>
            当前属性的赋值/取值器，可以避免反射的低效
            </summary>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.IsLongText">
            <summary>
            是否是长文本
            </summary>
        </member>
        <member name="P:System.ORM.EntityPropertyInfo.Label">
            <summary>
            获取属性的label(用在表单中)
            </summary>
        </member>
        <member name="T:System.ORM.EntityInfo">
            <summary>
            实体类的元数据信息
            </summary>
        </member>
        <member name="M:System.ORM.EntityInfo.GetByType(System.Type)">
            <summary>
            根据类型Type，初始化EntityInfo；注意：因为不是从缓存中取，所以速度较慢
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.EntityInfo.GetColumnName(System.String)">
            <summary>
            获取某个属性在数据库中对应的数据列名称
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.EntityInfo.GetProperty(System.String)">
            <summary>
            获取某个属性的元数据信息(已封装成EntityPropertyInfo)
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.EntityInfo.GetPropertyByColumn(System.String)">
            <summary>
            根据column名称，获取获取某个属性的元数据信息(已封装成EntityPropertyInfo)
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.EntityInfo.GetPropertyName(System.Type)">
            <summary>
            根据属性的类型，比如BlogCategory，获取符合要求的第一个属性的名称
            </summary>
            <param name="propertyType"></param>
            <returns></returns>
        </member>
        <member name="P:System.ORM.EntityInfo.Database">
            <summary>
            
            </summary>
        </member>
        <member name="P:System.ORM.EntityInfo.Assembly">
            <summary>
            
            </summary>
        </member>
        <member name="P:System.ORM.EntityInfo.ChildEntityList">
            <summary>
            
            </summary>
        </member>
        <member name="P:System.ORM.EntityInfo.ColumnList">
            <summary>
            对应的数据表中的所有列的名称
            </summary>
        </member>
        <member name="P:System.ORM.EntityInfo.EntityPropertyList">
            <summary>
            只是实体性质的属性的列表，比如 BlogPost 的某个属性是 BlogCategory 这样的实体类型
            </summary>
        </member>
        <member name="P:System.ORM.EntityInfo.PropertyListAll">
            <summary>
            所有属性的列表(属性已经封装成EntityPropertyInfo)
            </summary>
        </member>
        <member name="P:System.ORM.EntityInfo.SavedPropertyList">
            <summary>
            所有需要保存的属性
            </summary>
        </member>
        <member name="P:System.ORM.EntityInfo.FullName">
            <summary>
            实体类全名，比如 System.apps.BlogApp
            </summary>
        </member>
        <member name="P:System.ORM.EntityInfo.Label">
            <summary>
            实体类在表单中的名称，用于表单代码自动生成
            </summary>
        </member>
        <member name="P:System.ORM.EntityInfo.Name">
            <summary>
            实体类名称，等同于type.Name，比如BlogApp
            </summary>
        </member>
        <member name="P:System.ORM.EntityInfo.Parent">
            <summary>
            当前实体类的父类，如果它是继承于某个基类的话
            </summary>
        </member>
        <member name="P:System.ORM.EntityInfo.TableName">
            <summary>
            实体类对应的数据表名称
            </summary>
        </member>
        <member name="P:System.ORM.EntityInfo.Type">
            <summary>
            实体类对应的Type
            </summary>
        </member>
        <member name="P:System.ORM.EntityInfo.Dialect">
            <summary>
            实体类的 dialect
            </summary>
        </member>
        <member name="P:System.ORM.EntityInfo.DbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="M:System.ORM.CommonBase`1.Get(System.Int32)">
            <summary>
            根据ID获取对象
            </summary>
            <param name="Id">Id</param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.CommonBase`1.Get(System.String)">
            <summary>
            根据Guid获取对象
            </summary>
            <param name="Guid">Guid</param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.CommonBase`1.GetBy(System.String,System.String)">
            <summary>
            根据指定字段获取对象
            </summary>
            <param name="Field">字段名（varchar类型）</param>
            <param name="Value">值</param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.CommonBase`1.GetBy(System.Boolean,System.Boolean,System.Collections.Hashtable)">
            <summary>
            根据指定字段列表获取对象
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.CommonBase`1.GetBy(System.Boolean,System.Boolean,System.Data.KeyValue[])">
            <summary>
            根据指定字段列表获取对象
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.CommonBase`1.GetsBy(System.String,System.String)">
            <summary>
            根据指定字段获取对象列表
            </summary>
            <param name="Field">字段名（varchar类型）</param>
            <param name="Value">值</param>
            <returns></returns>
        </member>
        <member name="T:System.ORM.Caching.ContextCache">
            <summary>
            一级缓存(上下文缓存)
            </summary>
        </member>
        <member name="T:System.Log.NullLogger">
            <summary>
            使用 null 模式的日志工具
            </summary>
        </member>
        <member name="M:System.Log.NullLogger.Debug(System.String)">
            <summary>
            调试信息日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:System.Log.NullLogger.Info(System.String)">
            <summary>
            普通信息日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:System.Log.NullLogger.Warn(System.String)">
            <summary>
            警告信息日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:System.Log.NullLogger.Error(System.String)">
            <summary>
            错误信息日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:System.Log.NullLogger.Fatal(System.String)">
            <summary>
            崩溃信息日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:System.Log.NullLogger.Code(System.String,System.Int32)">
            <summary>
            记录代码执行情况信息日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:System.Log.NullLogger.TypeName">
            <summary>
            输出日志的类型名称
            </summary>
        </member>
        <member name="T:System.Log.LogMsg">
            <summary>
            日志信息(尚未实现，请勿使用)
            </summary>
        </member>
        <member name="P:System.Log.LogMsg.Id">
            <summary>
            日志的编号
            </summary>
        </member>
        <member name="P:System.Log.LogMsg.LogLevel">
            <summary>
            日志的等级
            </summary>
        </member>
        <member name="P:System.Log.LogMsg.LogTime">
            <summary>
            日志的时间
            </summary>
        </member>
        <member name="P:System.Log.LogMsg.Message">
            <summary>
            日志的内容
            </summary>
        </member>
        <member name="P:System.Log.LogMsg.TypeName">
            <summary>
            输出日志的类型名称
            </summary>
        </member>
        <member name="T:System.Web.SystemInfo">
            <summary>
            系统的固定数据，比如网站根路径、app路径、主机名称等。
            1) 可以在非web请求时候使用，比如定时器的新线程中使用;
            2) 获取不同域名级别下的的统一主机值
            </summary>
        </member>
        <member name="P:System.Web.SystemInfo.RootPath">
            <summary>
            比 ApplicationPath 多一个斜杠
            </summary>
        </member>
        <member name="P:System.Web.SystemInfo.ApplicationPath">
            <summary>
            比如 /myapp 或者 /
            </summary>
        </member>
        <member name="P:System.Web.SystemInfo.Host">
            <summary>
            主机名 www.xiechaoyi.com 或 localhost 或 127.0.0.1
            </summary>
        </member>
        <member name="P:System.Web.SystemInfo.SiteRoot">
            <summary>
            网站首页，普通模式是"/"，二级域名下是http加主机名
            </summary>
        </member>
        <member name="P:System.Web.SystemInfo.HostNoSubdomain">
            <summary>
            不带二级域名的 Host 名称，比如 abc.com 或 xcenter.cn
            </summary>
        </member>
        <member name="P:System.Web.SystemInfo.HostIsIp">
            <summary>
            Host 是否是ip地址
            </summary>
        </member>
        <member name="P:System.Web.SystemInfo.HostIsLocalhost">
            <summary>
            Host 是否等于 localhost
            </summary>
        </member>
        <member name="P:System.Web.SystemInfo.Authority">
            <summary>
            主机名(或ip地址)+端口号
            </summary>
        </member>
        <member name="P:System.Web.SystemInfo.IsWeb">
            <summary>
            是否Web应用
            </summary>
        </member>
        <member name="P:System.Web.SystemInfo.IsWindows">
            <summary>
            当前是否为Windows系统
            </summary>
        </member>
        <member name="T:System.Reflection.IConcreteFactory">
            <summary>
            CodeDom 中的对象工厂
            </summary>
        </member>
        <member name="T:System.ORM.Includer">
            <summary>
            查询属性等附件信息
            </summary>
        </member>
        <member name="T:System.ORM.NotSaveAttribute">
            <summary>
            ORM在保存数据的时候，会忽略打上 NotSave 批注的属性
            </summary>
        </member>
        <member name="T:System.Log.LogConfig">
            <summary>
            日志配置文件，默认配置文件在 /framework/config/log.config，日志文件在 /framework/log/log.txt 中
            </summary>
        </member>
        <member name="F:System.Log.LogConfig.Instance">
            <summary>
            日志配置信息(全局缓存)
            <remarks>
            logLevel 的值(不区分大小写)：none, debug, info, warn, error, fatal, all；
            logFile 和 logProvider 通常不用填写
            </remarks>
            <example>
            配置文件的格式(一行一条配置，键值之间用冒号分开)。
            <code>
            logLevel : info
            logFile : log/log.txt
            logProvider : System.Log.FileLogger
            inRealTime : true
            </code>
            </example>
            </summary>
        </member>
        <member name="P:System.Log.LogConfig.Level">
            <summary>
            记录的层次，不区分大小写，有 none, debug, info, warn, error, fatal, all 这几种可选
            </summary>
        </member>
        <member name="P:System.Log.LogConfig.FilePath">
            <summary>
            日志文件存储的路径
            </summary>
        </member>
        <member name="P:System.Log.LogConfig.LoggerImpl">
            <summary>
            日志记录工具，默认是 FileLogger
            </summary>
        </member>
        <member name="P:System.Log.LogConfig.InRealTime">
            <summary>
            是否实时输出日志信息
            </summary>
        </member>
        <member name="T:System.Serialization.SimpleJsonString">
            <summary>
            将简单的对象转换成 json 字符串，不支持子对象(即属性为对象)的序列化
            </summary>
        </member>
        <member name="M:System.Serialization.SimpleJsonString.ConvertList(System.Collections.IList)">
            <summary>
            将对象列表转换成 json 字符串
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:System.Serialization.SimpleJsonString.ConvertObject(System.Object)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:System.ORM.xQuery`1">
            <summary>
            泛型查询对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.ORM.xQuery`1.set(System.String,System.Object)">
            <summary>
            给查询条件中的参数赋值
            </summary>
            <param name="name">参数名称</param>
            <param name="val">参数值</param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.xQuery`1.list">
            <summary>
            返回查询的所有结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.ORM.xQuery`1.list(System.Int32)">
            <summary>
            返回符合查询条件的前 n 条结果
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.xQuery`1.first">
            <summary>
            返回符合查询条件的第一条结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.ORM.xQuery`1.count">
            <summary>
            统计符合查询条件的结果数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.ORM.xQuery`1.select(System.String)">
            <summary>
            (本方法不建议使用)只查询指定的属性，本来用于提高性能，但和缓存会起冲突。
            </summary>
            <param name="propertyString"></param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.xQuery`1.listChildren``1(System.String)">
            <summary>
            将所有结果对象的某个实体属性封装成集合返回
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:System.ORM.xQuery`1.get(System.String)">
            <summary>
            获取所有结果的某个属性的字符串集合，比如 get( "Id" ) 返回 "2, 7, 16, 25"
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:System.ORM.Caching.ContextPool">
            <summary>
            一级缓存(上下文缓存)的缓存池
            </summary>
        </member>
        <member name="T:System.ORM.NotNullAttribute">
            <summary>
            检查对象属性是否已经赋值，如果是字符串类型，empty的字符串也是不合法的
            </summary>
        </member>
        <member name="T:System.Log.LogMessage">
            <summary>
            日志信息
            </summary>
        </member>
        <member name="P:System.Log.LogMessage.LogLevel">
            <summary>
            日志的等级
            </summary>
        </member>
        <member name="P:System.Log.LogMessage.LogTime">
            <summary>
            日志的时间
            </summary>
        </member>
        <member name="P:System.Log.LogMessage.Message">
            <summary>
            日志的内容
            </summary>
        </member>
        <member name="P:System.Log.LogMessage.TypeName">
            <summary>
            输出日志的类型名称
            </summary>
        </member>
        <member name="T:System.Data.ParameterType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="T:System.Data.ConnectionString">
            <summary>
            数据库连接字符串内容的封装
            </summary>
        </member>
        <member name="T:System.Data.DbConfig">
            <summary>
            ORM 的数据库配置
            </summary>
        </member>
        <member name="F:System.Data.DbConfig.DefaultDbName">
            <summary>
            默认数据库名称(值为default)
            </summary>
        </member>
        <member name="F:System.Data.DbConfig.Instance">
            <summary>
            配置的缓存内容(单例模式缓存)
            </summary>
        </member>
        <member name="M:System.Data.DbConfig.GetConnectionStringMap">
            <summary>
            多个数据库连接字符串对象的map，值是ConnectionString对象(包括Name/StringContent/DbType)
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.DbConfig.GetMetaDllAbsPath">
            <summary>
            获取元数据库文件的绝对路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.DbConfig.GetMappingInfo">
            <summary>
            获取映射信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.DbConfig.GetConnectionString(System.String)">
            <summary>
            根据命名，获取数据库连接字符串
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="P:System.Data.DbConfig.ConnectionStringTable">
            <summary>
            直接解析json的结果：多个数据库连接字符串(connectionString)的键值对
            </summary>
        </member>
        <member name="P:System.Data.DbConfig.DbType">
            <summary>
            直接解析json的结果：数据库类型
            </summary>
        </member>
        <member name="P:System.Data.DbConfig.AssemblyList">
            <summary>
            直接解析json的结果：程序集列表
            </summary>
        </member>
        <member name="P:System.Data.DbConfig.IsCheckDatabase">
            <summary>
            是否坚持数据库，如果检查，则会将尚未创建的数据表自动创建
            </summary>
        </member>
        <member name="P:System.Data.DbConfig.TablePrefix">
            <summary>
            数据表的前缀(默认没有前缀)
            </summary>
        </member>
        <member name="P:System.Data.DbConfig.ContextCache">
            <summary>
            是否开启一级缓存，默认开启，并且建议开启
            </summary>
        </member>
        <member name="P:System.Data.DbConfig.ApplicationCache">
            <summary>
            是否开启二级缓存
            </summary>
        </member>
        <member name="P:System.Data.DbConfig.ApplicationCacheMinutes">
            <summary>
            二级缓存的时间(分钟)
            </summary>
        </member>
        <member name="P:System.Data.DbConfig.ApplicationCacheManager">
            <summary>
            二级缓存管理程序，请填写类型(type)的全名(full name)，比如 System.somens.myCache；
            如果不填写，则使用默认的System.Web.Caching
            </summary>
        </member>
        <member name="P:System.Data.DbConfig.MetaDLL">
            <summary>
            ORM 的元数据文件名称，一般不需填写(建议不要填写)。如果为了提高网站启动时候的速度，可以填写。
            系统会根据文件名自动生成元数据文件，可以避免以后网站启动过程中的反射，能略微提高启动速度；
            文件名不包括路径(必须放在bin目录中)，比如 System.meta.dll
            </summary>
        </member>
        <member name="P:System.Data.DbConfig.Mapping">
            <summary>
            直接解析json的结果：数据表映射
            </summary>
        </member>
        <member name="P:System.Data.DbConfig.Interceptor">
            <summary>
            拦截器列表
            </summary>
        </member>
        <member name="P:System.Data.DbConfig.OptimizeMode">
            <summary>
            反射优化模式，目前只实现了 CodeDom 方式
            </summary>
        </member>
        <member name="T:System.INode">
            <summary>
            树状节点接口
            </summary>
        </member>
        <member name="P:System.INode.Id">
            <summary>
            节点的 Id
            </summary>
        </member>
        <member name="P:System.INode.Name">
            <summary>
            节点的名称
            </summary>
        </member>
        <member name="P:System.INode.ParentId">
            <summary>
            上级节点的 Id
            </summary>
        </member>
        <member name="T:System.INodeBinder">
            <summary>
            节点绑定器
            </summary>
        </member>
        <member name="T:System.Node`1">
            <summary>
            树状节点(将 T 做了封装，便于操作)
            </summary>
            <typeparam name="T">节点必须实现了 INode 接口</typeparam>
        </member>
        <member name="M:System.Node`1.getNode">
            <summary>
            获取原始节点数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Node`1.getParent">
            <summary>
            获取上级节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Node`1.getDepth">
            <summary>
            获取节点的深度
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Node`1.getChildren">
            <summary>
            获取所有子节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Node`1.getPrev">
            <summary>
            获取前一个节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Node`1.getNext">
            <summary>
            获取后一个节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Tree`1">
            <summary>
            树状结构
            </summary>
            <typeparam name="T">节点必须实现了 INode 接口</typeparam>
        </member>
        <member name="M:System.Tree`1.FindById(System.Int32)">
            <summary>
            根据 Id 检索节点
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:System.Tree`1.FindParent(System.Int32)">
            <summary>
            根据 Id 获取它的上级节点
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:System.Tree`1.FindPath(System.Int32)">
            <summary>
            根据 Id，获取它的节点路径(从根级开始到当前节点)
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:System.Tree`1.FindRoots">
            <summary>
            获取所有根节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Tree`1.FindChildren(System.Int32)">
            <summary>
            根据 Id，获取所有子节点
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:System.Tree`1.FindAllOrdered">
            <summary>
            获取所有节点(经过排序)
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Tree`1.GetById(System.Int32)">
            <summary>
            根据 Id 获取节点
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:System.Tree`1.GetDepth(System.Int32)">
            <summary>
            根据 Id 获取节点的深度
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:System.Tree`1.GetParent(System.Int32)">
            <summary>
            根据 Id 获取上级节点
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:System.Tree`1.GetPath(System.Int32)">
            <summary>
            根据 Id，获取节点的路径(从根级开始到当前节点)
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:System.Tree`1.GetChildren(System.Int32)">
            <summary>
            根据 Id，获取所有下级节点
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:System.Tree`1.GetRoots">
            <summary>
            获取所有根节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Tree`1.GetAllOrdered">
            <summary>
            获取所有排序过的节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Tree`1.DropList(System.String,System.Int32)">
            <summary>
            树状下拉列表控件
            </summary>
            <param name="dropName">下拉列表name</param>
            <param name="selectValue">当前选定的值</param>
            <returns></returns>
        </member>
        <member name="M:System.Tree`1.DropList(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            获取下拉列表select
            </summary>
            <param name="dropName">下拉列表的name和id</param>
            <param name="selectValue">当前选中项的值</param>
            <param name="nodeId">当select用于设置父节点之时，此参数表示将节点自己排除在下拉列表之外，防止将自己作为自己的父节点</param>
            <param name="rootSelectName">根节点(并不存在，但你可以给它取个名称)</param>
            <returns></returns>
        </member>
        <member name="M:System.Tree`1.RenderList(System.String)">
            <summary>
            获取树状结构的 html
            </summary>
            <param name="treeId"></param>
            <returns></returns>
        </member>
        <member name="M:System.Tree`1.RenderList(System.String,System.Boolean,System.INodeBinder,System.Int32)">
            <summary>
            获取树状结构的 html
            </summary>
            <param name="treeId"></param>
            <param name="showChildren"></param>
            <param name="binder"></param>
            <param name="currentNodeId"></param>
            <returns></returns>
        </member>
        <member name="T:System.strUtil">
            <summary>
            字符串工具类，封装了常见字符串操作
            </summary>
        </member>
        <member name="M:System.strUtil.IsNullOrEmpty(System.String)">
            <summary>
            检查字符串是否是 null 或者空白字符。不同于.net自带的string.IsNullOrEmpty，多个空格在这里也返回true。
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.HasText(System.String)">
            <summary>
            检查是否包含有效字符(空格等空白字符不算)
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.Equals(System.String,System.String)">
            <summary>
            比较两个字符串是否相等
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            比较两个字符串是否相等(不区分大小写)
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.Append(System.String,System.String)">
            <summary>
            将 endString 附加到 srcString末尾，如果 srcString 末尾已包含 endString，则不再附加。
            </summary>
            <param name="srcString"></param>
            <param name="endString"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.ConverToNotNull(System.Object)">
            <summary>
            将对象转为字符串，如果对象为 null，则转为空字符串(string.Empty)
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.CutString(System.Object,System.Int32)">
            <summary>
            从字符串中截取指定长度的一段，如果源字符串被截取了，则结果末尾出现省略号...
            </summary>
            <param name="str">源字符串</param>
            <param name="length">需要截取的长度</param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.CutString(System.String,System.Int32)">
            <summary>
            从字符串中截取指定长度的一段，如果源字符串被截取了，则结果末尾出现省略号...
            </summary>
            <param name="str">源字符串</param>
            <param name="length">需要截取的长度</param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.Edit(System.String)">
            <summary>
            将字符串转换为编辑器中可用的字符串(替换掉换行符号)
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.EncodeQuote(System.String)">
            <summary>
            对双引号进行编码
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.EncodeTextarea(System.String)">
            <summary>
            让 html 在 textarea 中正常显示。替换尖括号和字符&amp;lt;与&amp;gt;
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.EncodeQuoteAndClearLine(System.String)">
            <summary>
            对双引号进行编码，并替换掉换行符
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.getHtmlTitle(System.String)">
            <summary>
            获取 html 文档的标题内容
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.GetIntString(System.Int32,System.Int32)">
            <summary>
            将整数按照指定的长度转换为字符串，比如33转换为6位就是"000033"
            </summary>
            <param name="intValue"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.GetTitleCase(System.String)">
            <summary>
            得到字符串的 TitleCase 格式
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.GetCamelCase(System.String)">
            <summary>
            得到字符串的 CamelCase 格式
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.GetTypeName(System.String)">
            <summary>
            从类型的全名中获取类型名称(不包括命名空间)
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.GetTypeName(System.Type)">
            <summary>
            获取类型名称(主要针对泛型做特殊处理)。如果要获取内部元素信息，请使用t.GetGenericArguments
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.GetTypeFullName(System.Type)">
            <summary>
            获取类型全名(主要针对泛型做特殊处理)，比如List&lt;String&gt;返回System.Collections.Generic.List。如果要获取内部元素信息，请使用t.GetGenericArguments
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.GetGenericTypeWithArgs(System.Type)">
            <summary>
            返回泛型的类型全名，包括元素名，比如System.Collections.Generic.List&lt;System.String&gt;
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.IsLetter(System.String)">
            <summary>
            是否是英文字符和下划线
            </summary>
            <param name="rawString"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.IsUrlItem(System.String)">
            <summary>
            是否是英文、数字和下划线，但不能以下划线开头
            </summary>
            <param name="rawString"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.IsChineseLetter(System.String)">
            <summary>
            是否全部都是中文字符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.IsAbcNumberAndChineseLetter(System.String)">
            <summary>
            只能以英文或中文开头，允许英文、数字、下划线和中文；
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.IsColorValue(System.String)">
            <summary>
            是否是有效的颜色值(3位或6位，全部由英文字符或数字组成)
            </summary>
            <param name="aColor"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.IsSafeSqlString(System.String)">
            <summary>
            检测是否有Sql危险字符
            </summary>
            <param name="str">要判断字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:System.strUtil.GetSafeSqlString(System.String)">
            <summary>
            获取安全的Sql参数值
            </summary>
            <param name="str">要处理的字符串</param>
            <returns>安全的Sql参数值</returns>
        </member>
        <member name="M:System.strUtil.IsIP(System.String)">
            <summary>
            是否为ip
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.IsNumber(System.String)">
            <summary>
            是否为数字
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.UrlEncode(System.String)">
            <summary>
            返回 URL 字符串的编码结果
            </summary>
            <param name="str">字符串</param>
            <returns>编码结果</returns>
        </member>
        <member name="M:System.strUtil.UrlEncode(System.String,System.String)">
            <summary>
            返回 URL 字符串的编码结果
            </summary>
            <param name="str">字符串</param>
            <param name="encoding">编码类型，如（gb2312,utf-8,gbk），默认为utf-8</param>
            <returns>编码结果</returns>
        </member>
        <member name="M:System.strUtil.UrlDecode(System.String)">
            <summary>
            返回 URL 字符串的解码结果
            </summary>
            <param name="str">字符串</param>
            <returns>解码结果</returns>
        </member>
        <member name="M:System.strUtil.UrlDecode(System.String,System.String)">
            <summary>
            返回 URL 字符串的解码结果
            </summary>
            <param name="str">字符串</param>
            <returns>解码结果</returns>
            <param name="encoding">编码类型，如（gb2312,utf-8,gbk），默认为utf-8</param>
        </member>
        <member name="M:System.strUtil.GenerateTimeStamp">
            <summary>
            获取当前的时间戳       
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.GenerateTimeStamp(System.DateTime)">
            <summary>
            获取当前的时间戳       
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.Join(System.String[])">
            <summary>
            用“,”并联一个字符串数组
            </summary>
            <param name="strS"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.Join(System.String,System.String[])">
            <summary>
            并联一个字符串数组
            </summary>
            <param name="separator">分隔符</param>
            <param name="strS"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.Join(System.String,System.String)">
            <summary>
            用斜杠/拼接两个字符串
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.Join(System.String,System.String,System.String)">
            <summary>
            根据制定的分隔符拼接两个字符串
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.ParseHtml(System.Object)">
            <summary>
            剔除 html 中的 tag
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.ParseHtml(System.Object,System.Int32)">
            <summary>
            剔除 html 中的 tag，并返回指定长度的字符串
            </summary>
            <param name="html"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.CutHtmlAndColse(System.String,System.Int32)">
            <summary>
            从 html 中截取指定长度的一段，并关闭未结束的 html 标签
            </summary>
            <param name="html"></param>
            <param name="count">需要截取的长度(小于20个字符按20个字符计算)</param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.CloseHtml(System.String)">
            <summary>
            关闭未结束的 html 标签
            (TODO 本方法临时使用，待重写)
            </summary>
            <param name="unClosedHtml"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.Split(System.String,System.String)">
            <summary>
            将字符串分割成数组
            </summary>
            <param name="srcString"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.SqlClean(System.String,System.Int32)">
            <summary>
            过滤掉 sql 语句中的单引号，并返回指定长度的结果
            </summary>
            <param name="rawSql"></param>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.SubString(System.String,System.Int32)">
            <summary>
            从字符串中截取指定长度的一段，结果末尾没有省略号
            </summary>
            <param name="str"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.Text2Html(System.String)">
            <summary>
            将纯文本中的换行符转换成html中换行符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.Html2Text(System.String)">
            <summary>
            将html中换行符转换成纯文本中的换行符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.TrimEnd(System.String,System.String)">
            <summary>
            从 srcString 的末尾剔除掉 trimString
            </summary>
            <param name="srcString"></param>
            <param name="trimString"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.TrimStart(System.String,System.String)">
            <summary>
            从 srcString 的开头剔除掉 trimString
            </summary>
            <param name="srcString"></param>
            <param name="trimString"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.ResetScript(System.String)">
            <summary>
            将 html 中的脚本从各个部位，全部挪到页脚，以提高网页加载速度
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.SplitByNum(System.String,System.Int32)">
            <summary>
            将字符串分割成平均的n等份，每份长度为count
            </summary>
            <param name="str"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.TrimHtml(System.String)">
            <summary>
            将 html 中空白字符和空白标记(&amp;nbsp;)剔除掉
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.GetEndNumber(System.String)">
            <summary>
            截取字符串末尾的整数
            </summary>
            <param name="rawString"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.GetIds(System.Collections.IList)">
            <summary>
            根据对象(IEntity)列表，获取所有对象的ids字符串
            </summary>
            <param name="objList">对象必须是IEntity接口</param>
            <returns>比如 2,5,8 等</returns>
        </member>
        <member name="M:System.strUtil.ConvertToHTML(System.String)">
            <summary>
            将Text字符串转换成HTML格式字符串
            </summary>
            <param name="old"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.ConvertToJSString(System.String)">
            <summary>
             将Text字符串转换成javascript格式字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.ConvertToCHNNumber(System.Int32,System.Boolean)">
            <summary>
            将阿拉伯数字转换成中文数字
            </summary>
            <param name="number"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.Ellipsis(System.String,System.Int32,System.String)">
            <summary>
            按指定的长度截取字符串
            </summary>
            <param name="s"></param>
            <param name="l"></param>
            <param name="endStr"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.RemoveHtmlTag(System.String)">
            <summary>
            移除Html标签
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:System.strUtil.SubstringToHTML(System.String,System.Int32,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:System.strUtil.GetStringByUnicode(System.String)">
            <summary>
            Unicode转换为字符
            </summary>
            <param name="strUnicode">Unicode编码</param>
            <returns>字符</returns>
        </member>
        <member name="M:System.strUtil.GetUnicodeByString(System.String)">
            <summary>
            字符转换为Unicode编码
            </summary>
            <param name="strInput">字符</param>
            <returns>Unicode编码</returns>
        </member>
        <member name="F:System.strUtil.pyValue">
            <summary>
            汉字转换为拼音
            </summary>
        </member>
        <member name="M:System.strUtil.Chs2Pinyin(System.String)">
            <summary>
            汉字转换为拼音(每个字的首字母大写)
            </summary>
            <param name="chrstr">输入的汉字</param>
            <returns>输出的拼音</returns>
        </member>
        <member name="M:System.strUtil.Chs2PinyinSplit(System.String)">
            <summary>
            汉字转换为拼音
            </summary>
            <param name="chrstr">输入的汉字</param>
            <returns>输出的拼音</returns>
        </member>
        <member name="M:System.strUtil.GetChineseSpell(System.String)">
            <summary>
            依次取得字符串中每个字符的拼音首字母
            </summary>
            <param name="strText"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.GetOnlyUpper(System.String)">
            <summary>
            获取字符串中的大写字母
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.CheckSensitiveWordsZhcn(System.String,System.String)">
            <summary>
            检测敏感词（自动过滤符号，只支持中文）
            </summary>
            <param name="content">需要检测的内容，如：超G强抗t△干dst△扰敏■■感※◇词 kljb过＆滤jb一■＆№正■№则匹◎←配代crSBtr码（只……支{持^中#^文）</param>
            <param name="blackwords">需要检测的关键字，如：(超强|抗干扰|敏感词|过滤|正则匹配|代码|只支持|中文)</param>
            <param name="times">最低命中次数</param>
            <returns>检测到敏感词时，Result.IsValid为false，且Result.Errors为命中关键字列表</returns>
        </member>
        <member name="M:System.strUtil.CheckSensitiveWordsZhcn(System.String,System.String,System.Int32)">
            <summary>
            检测敏感词（自动过滤符号，只支持中文）
            </summary>
            <param name="content">需要检测的内容，如：超G强抗t△干dst△扰敏■■感※◇词 kljb过＆滤jb一■＆№正■№则匹◎←配代crSBtr码（只……支{持^中#^文）</param>
            <param name="blackwords">需要检测的关键字，如：(超强|抗干扰|敏感词|过滤|正则匹配|代码|只支持|中文)</param>
            <param name="times">最低命中次数</param>
            <returns>检测到敏感词时，Result.IsValid为false，且Result.Errors为命中关键字列表</returns>
        </member>
        <member name="M:System.strUtil.CheckSensitiveWords(System.String,System.String)">
            <summary>
            检测敏感词（自动过滤符号）
            </summary>
            <param name="content">需要检测的内容</param>
            <param name="blackwords">需要检测的关键字</param>
            <param name="times">最低命中次数</param>
            <returns>检测到敏感词时，Result.IsValid为false，且Result.Errors为命中关键字列表</returns>
        </member>
        <member name="M:System.strUtil.CheckSensitiveWords(System.String,System.String,System.Int32)">
            <summary>
            检测敏感词（自动过滤符号）
            </summary>
            <param name="content">需要检测的内容</param>
            <param name="blackwords">需要检测的关键字</param>
            <param name="times">最低命中次数</param>
            <returns>检测到敏感词时，Result.IsValid为false，且Result.Errors为命中关键字列表</returns>
        </member>
        <member name="M:System.strUtil.GetQueryString(System.String)">
            <summary>
            将查询字符串解析转换为名值集合.
            </summary>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:System.strUtil.GetQueryString(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            将查询字符串解析转换为名值集合.
            </summary>
            <param name="queryString"></param>
            <param name="encoding"></param>
            <param name="isEncoded"></param>
            <returns></returns>
        </member>
        <member name="T:System.rft">
            <summary>
            封装了反射的常用操作方法
            </summary>
        </member>
        <member name="T:System.Reflection.ReflectionUtil">
            <summary>
            封装了反射的常用操作方法
            </summary>
        </member>
        <member name="M:System.Reflection.ReflectionUtil.GetInstance(System.Type)">
            <summary>
            通过反射创建对象(Activator.CreateInstance)
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.ReflectionUtil.GetInstance(System.Type,System.Object[])">
            <summary>
            通过反射创建对象(Activator.CreateInstance)，并提供构造函数
            </summary>
            <param name="t"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.ReflectionUtil.GetInstance(System.String,System.String)">
            <summary>
            为类型创建对象(通过加载指定程序集中的类型)
            </summary>
            <param name="asmName">不需要后缀名</param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.ReflectionUtil.GetInstance(System.String)">
            <summary>
            为类型创建对象(直接指定类型的完全限定名称)
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.ReflectionUtil.getPropertyTypeName(System.Reflection.PropertyInfo)">
            <summary>
            获取属性的类型的fullName(对泛型名称做了特殊处理)
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.ReflectionUtil.GetMethods(System.Type)">
            <summary>
            获取 public 实例方法，不包括继承的方法
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.ReflectionUtil.GetMethodsWithInheritance(System.Type)">
            <summary>
            获取 public 实例方法，包括继承的方法
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.ReflectionUtil.IsInterface(System.Type,System.Type)">
            <summary>
            判断 t 是否实现了某种接口
            </summary>
            <param name="t">需要判断的类型</param>
            <param name="interfaceType">是否实现的接口</param>
            <returns></returns>
        </member>
        <member name="T:System.ORM.MappingClass">
            <summary>
            实体类和数据表关联映射的信息
            </summary>
        </member>
        <member name="P:System.ORM.MappingClass.AssemblyList">
            <summary>
            ORM需要加载的所有程序集
            </summary>
        </member>
        <member name="P:System.ORM.MappingClass.ClassList">
            <summary>
            所有需要持久化的实体的 EntityInfo(每个EntityInfo包括类型、映射的表名等信息)
            </summary>
        </member>
        <member name="P:System.ORM.MappingClass.TypeList">
            <summary>
            所有需要持久化的实体的类型(type)
            </summary>
        </member>
        <member name="P:System.ORM.MappingClass.FactoryList">
            <summary>
            所有需要持久化的实体的创建工厂
            </summary>
        </member>
        <member name="P:System.ORM.MappingClass.InterceptorList">
            <summary>
            所有拦截器
            </summary>
        </member>
        <member name="P:System.ORM.MappingClass.TableList">
            <summary>
            所有表名
            </summary>
        </member>
        <member name="T:System.ORM.UniqueAttribute">
            <summary>
            唯一性验证批注，验证对象的属性值是否在所有对象中是唯一的
            </summary>
        </member>
        <member name="T:System.LogManager">
            <summary>
            日志管理对象，通常用于获取日志工具
            </summary>
            <example>
            一般在类的第一行定义
            <code>
            private static readonly ILog logger = LogManager.GetLogger( typeof( ObjectBase ) );
            </code>
            然后可以在其他方法中使用
            <code>
            logger.Info( "your message" );
            </code>
            </example>
        </member>
        <member name="M:System.LogManager.GetLogger(System.Type)">
            <summary>
            获取一个日志工具
            </summary>
            <param name="type">对象类型</param>
            <returns>返回日志工具</returns>
        </member>
        <member name="M:System.LogManager.GetLogger(System.String)">
            <summary>
            获取一个日志工具
            </summary>
            <param name="typeName">对象类型</param>
            <returns>返回日志工具</returns>
        </member>
        <member name="M:System.LogManager.GetLogger">
            <summary>
            获取一个日志工具
            </summary>
            <param name="typeName">对象类型</param>
            <returns>返回日志工具</returns>
        </member>
        <member name="M:System.LogManager.Flush">
            <summary>
            立即将日志内容写入磁盘(在 web 中，日志是在页面请求结束的时候才一起写入到磁盘的)
            </summary>
        </member>
        <member name="T:System.Log.LoggerForDB">
            <summary>
            存储到数据库的日志(尚未实现，请勿使用)
            </summary>
        </member>
        <member name="M:System.Log.LoggerForDB.Code(System.String,System.Int32)">
            <summary>
            记录代码执行情况信息日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:System.Data.SessionsData">
            <summary>
            Sessions
            </summary>
        </member>
        <member name="T:System.Data.EasyDB">
            <summary>
            简易数据库操作工具，兼容多种数据库，可执行sql，返回DataReader等
            </summary>
        </member>
        <member name="T:System.cfgHelper">
            <summary>
            读取、修改配置文件的帮助类。
            </summary>
            <remarks>
            每行包括键和值，中间的分隔符默认是英文冒号。
            如果某行以双斜杠 // 或井号 # 开头，就表示此行内容是注释
            </remarks>
        </member>
        <member name="F:System.cfgHelper.FrameworkRoot">
            <summary>
            框架的根目录，默认是在 /xcenter/ 目录下。
            你也可以在 web.config 的 appSettings 中，添加 FrameworkRoot 项，来自定义框架的根目录
            </summary>
        </member>
        <member name="M:System.cfgHelper.GetAppSettings(System.String)">
            <summary>
            获取 web.config 的 AppSettings 中某项的值
            </summary>
            <param name="key">项的名称</param>
            <returns>返回一个字符串值</returns>
        </member>
        <member name="M:System.cfgHelper.SetAppSettings(System.String,System.String)">
            <summary>
            设置 web.config 的 AppSettings 中某项的值
            </summary>
            <param name="key">项的名称</param>
            <param name="value">项的值</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:System.cfgHelper.UseXCoreSessionStateStore(System.Boolean)">
            <summary>
            设置是否使用XCoreSessionStateStore来存储会话状态
            </summary>
            <param name="use"></param>
            <returns></returns>
        </member>
        <member name="M:System.cfgHelper.Read(System.String)">
            <summary>
            读取配置文件，将结果放到字典Dictionary中返回
            </summary>
            <param name="path">请使用绝对路径</param>
            <returns>返回一个字符串字典</returns>
        </member>
        <member name="M:System.cfgHelper.Read``1">
            <summary>
            读取配置文件，返回一个对象。配置文件的路径是 /xcenter/conf/{typeFullName}.config
            </summary>
            <typeparam name="T">对象的类型</typeparam>
            <returns>返回 T 类型的对象</returns>
        </member>
        <member name="M:System.cfgHelper.ReadByFile``1(System.String)">
            <summary>
            读取配置文件，返回一个对象。
            </summary>
            <typeparam name="T">对象的类型</typeparam>
            <param name="fileName">纯文件名称，不包括路径(默认是在 /xcenter/conf/ 目录下)</param>
            <returns>返回 T 类型的对象</returns>
        </member>
        <member name="M:System.cfgHelper.ReadByFile``1(System.String,System.Char)">
            <summary>
            读取配置文件，返回一个对象。
            </summary>
            <typeparam name="T">对象的类型</typeparam>
            <param name="fileName">纯文件名称，不包括路径(默认是在 /xcenter/conf/ 目录下)</param>
            <param name="separator">键和值之间的分隔符</param>
            <returns>返回 T 类型的对象</returns>
        </member>
        <member name="M:System.cfgHelper.Read``1(System.String)">
            <summary>
            读取配置文件，返回一个对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">配置文件的路径(相对路径，相对于项目的根目录)</param>
            <returns>返回 T 类型的对象</returns>
        </member>
        <member name="M:System.cfgHelper.Read``1(System.String,System.Char)">
            <summary>
            读取配置文件，然后将结果通过反射，赋值给 T 类型的对象并返回。
            (对象的属性只支持 int/string/bool/decimal/DateTime 五种类型)
            </summary>
            <typeparam name="T">对象的类型</typeparam>
            <param name="path">配置文件的路径(相对路径，相对于项目的根目录)</param>
            <param name="separator">键和值之间的分隔符</param>
            <returns>返回一个对象</returns>
        </member>
        <member name="M:System.cfgHelper.Read(System.String,System.Char)">
            <summary>
            读取配置文件，返回一个 Dictionary，键值都是字符串
            </summary>
            <param name="path">配置文件的路径(相对路径，相对于项目的根目录)</param>
            <param name="separator">键和值之间的分隔符</param>
            <returns>返回一个 Dictionary</returns>
        </member>
        <member name="M:System.cfgHelper.Write(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            将 Dictionary 对象持久化到磁盘
            </summary>
            <param name="dic">一个 Dictionary</param>
            <param name="path">配置文件的路径(相对路径，相对于项目的根目录)</param>
        </member>
        <member name="M:System.cfgHelper.Write(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Char)">
            <summary>
            将 Dictionary 对象持久化到磁盘
            </summary>
            <param name="dic">一个 Dictionary</param>
            <param name="path">配置文件的路径(相对路径，相对于项目的根目录)</param>
            <param name="separator">键和值之间的分隔符</param>
        </member>
        <member name="M:System.cfgHelper.Write(System.Object)">
            <summary>
            将对象持久化到磁盘。保存的路径是 /xcenter/conf/{typeFullName}.config
            </summary>
            <param name="obj">某特定对象</param>
        </member>
        <member name="M:System.cfgHelper.WriteToFile(System.Object,System.String)">
            <summary>
            将对象持久化到磁盘。
            </summary>
            <param name="obj">某特定对象</param>
            <param name="fileName">纯文件名称，不包括路径(默认是在 /xcenter/conf/ 下)</param>
        </member>
        <member name="M:System.cfgHelper.WriteToFile(System.Object,System.String,System.Char)">
            <summary>
            将对象持久化到磁盘
            </summary>
            <param name="obj">某特定对象</param>
            <param name="fileName">纯文件名称，不包括路径(默认是在 /xcenter/conf/ 下)</param>
            <param name="separator">键和值之间的分隔符</param>
        </member>
        <member name="M:System.cfgHelper.GetDicString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            将 Dictionary 序列化为字符串
            </summary>
            <param name="dic"></param>
            <returns></returns>
        </member>
        <member name="M:System.cfgHelper.setSeparator(System.Char)">
            <summary>
            设置键和值之间的分隔符
            </summary>
            <param name="separator"></param>
        </member>
        <member name="M:System.cfgHelper.ToString">
            <summary>
            配置文件的内容
            </summary>
            <returns></returns>
        </member>
        <member name="P:System.cfgHelper.ConfigRoot">
            <summary>
            框架配置文件的根目录，在 /xcenter/conf/ 目录下
            你也可以在 web.config 的 appSettings 中，添加 ConfigRoot 项，来自定义框架的根目录
            </summary>
        </member>
        <member name="P:System.cfgHelper.Content">
            <summary>
            配置文件的内容
            </summary>
        </member>
        <member name="P:System.cfgHelper.Dic">
            <summary>
            以 Dictionary 的形式设置或获取配置
            </summary>
        </member>
    </members>
</doc>
